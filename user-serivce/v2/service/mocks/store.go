// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	data "todopoint/user/v2/data"

	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, info
func (_m *Store) Create(ctx *gin.Context, info *data.UserInfo) error {
	ret := _m.Called(ctx, info)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *data.UserInfo) error); ok {
		r0 = rf(ctx, info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOne provides a mock function with given fields: ctx, uid
func (_m *Store) FindOne(ctx *gin.Context, uid int) (*data.Me, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 *data.Me
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, int) (*data.Me, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, int) *data.Me); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.Me)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, int) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
