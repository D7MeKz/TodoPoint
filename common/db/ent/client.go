// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"todopoint/common/db/ent/migrate"

	"todopoint/common/db/ent/member"
	"todopoint/common/db/ent/point"
	"todopoint/common/db/ent/pointinfo"
	"todopoint/common/db/ent/subtask"
	"todopoint/common/db/ent/task"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Member is the client for interacting with the Member builders.
	Member *MemberClient
	// Point is the client for interacting with the Point builders.
	Point *PointClient
	// PointInfo is the client for interacting with the PointInfo builders.
	PointInfo *PointInfoClient
	// SubTask is the client for interacting with the SubTask builders.
	SubTask *SubTaskClient
	// Task is the client for interacting with the Task builders.
	Task *TaskClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Member = NewMemberClient(c.config)
	c.Point = NewPointClient(c.config)
	c.PointInfo = NewPointInfoClient(c.config)
	c.SubTask = NewSubTaskClient(c.config)
	c.Task = NewTaskClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Member:    NewMemberClient(cfg),
		Point:     NewPointClient(cfg),
		PointInfo: NewPointInfoClient(cfg),
		SubTask:   NewSubTaskClient(cfg),
		Task:      NewTaskClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Member:    NewMemberClient(cfg),
		Point:     NewPointClient(cfg),
		PointInfo: NewPointInfoClient(cfg),
		SubTask:   NewSubTaskClient(cfg),
		Task:      NewTaskClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Member.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Member.Use(hooks...)
	c.Point.Use(hooks...)
	c.PointInfo.Use(hooks...)
	c.SubTask.Use(hooks...)
	c.Task.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Member.Intercept(interceptors...)
	c.Point.Intercept(interceptors...)
	c.PointInfo.Intercept(interceptors...)
	c.SubTask.Intercept(interceptors...)
	c.Task.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *MemberMutation:
		return c.Member.mutate(ctx, m)
	case *PointMutation:
		return c.Point.mutate(ctx, m)
	case *PointInfoMutation:
		return c.PointInfo.mutate(ctx, m)
	case *SubTaskMutation:
		return c.SubTask.mutate(ctx, m)
	case *TaskMutation:
		return c.Task.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// MemberClient is a client for the Member schema.
type MemberClient struct {
	config
}

// NewMemberClient returns a client for the Member from the given config.
func NewMemberClient(c config) *MemberClient {
	return &MemberClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `member.Hooks(f(g(h())))`.
func (c *MemberClient) Use(hooks ...Hook) {
	c.hooks.Member = append(c.hooks.Member, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `member.Intercept(f(g(h())))`.
func (c *MemberClient) Intercept(interceptors ...Interceptor) {
	c.inters.Member = append(c.inters.Member, interceptors...)
}

// Create returns a builder for creating a Member entity.
func (c *MemberClient) Create() *MemberCreate {
	mutation := newMemberMutation(c.config, OpCreate)
	return &MemberCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Member entities.
func (c *MemberClient) CreateBulk(builders ...*MemberCreate) *MemberCreateBulk {
	return &MemberCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MemberClient) MapCreateBulk(slice any, setFunc func(*MemberCreate, int)) *MemberCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MemberCreateBulk{err: fmt.Errorf("calling to MemberClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MemberCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MemberCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Member.
func (c *MemberClient) Update() *MemberUpdate {
	mutation := newMemberMutation(c.config, OpUpdate)
	return &MemberUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MemberClient) UpdateOne(m *Member) *MemberUpdateOne {
	mutation := newMemberMutation(c.config, OpUpdateOne, withMember(m))
	return &MemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MemberClient) UpdateOneID(id int) *MemberUpdateOne {
	mutation := newMemberMutation(c.config, OpUpdateOne, withMemberID(id))
	return &MemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Member.
func (c *MemberClient) Delete() *MemberDelete {
	mutation := newMemberMutation(c.config, OpDelete)
	return &MemberDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MemberClient) DeleteOne(m *Member) *MemberDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MemberClient) DeleteOneID(id int) *MemberDeleteOne {
	builder := c.Delete().Where(member.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MemberDeleteOne{builder}
}

// Query returns a query builder for Member.
func (c *MemberClient) Query() *MemberQuery {
	return &MemberQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMember},
		inters: c.Interceptors(),
	}
}

// Get returns a Member entity by its id.
func (c *MemberClient) Get(ctx context.Context, id int) (*Member, error) {
	return c.Query().Where(member.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MemberClient) GetX(ctx context.Context, id int) *Member {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPointInfo queries the point_info edge of a Member.
func (c *MemberClient) QueryPointInfo(m *Member) *PointInfoQuery {
	query := (&PointInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(member.Table, member.FieldID, id),
			sqlgraph.To(pointinfo.Table, pointinfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, member.PointInfoTable, member.PointInfoColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTasks queries the tasks edge of a Member.
func (c *MemberClient) QueryTasks(m *Member) *TaskQuery {
	query := (&TaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(member.Table, member.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, member.TasksTable, member.TasksPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MemberClient) Hooks() []Hook {
	return c.hooks.Member
}

// Interceptors returns the client interceptors.
func (c *MemberClient) Interceptors() []Interceptor {
	return c.inters.Member
}

func (c *MemberClient) mutate(ctx context.Context, m *MemberMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MemberCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MemberUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MemberDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Member mutation op: %q", m.Op())
	}
}

// PointClient is a client for the Point schema.
type PointClient struct {
	config
}

// NewPointClient returns a client for the Point from the given config.
func NewPointClient(c config) *PointClient {
	return &PointClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `point.Hooks(f(g(h())))`.
func (c *PointClient) Use(hooks ...Hook) {
	c.hooks.Point = append(c.hooks.Point, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `point.Intercept(f(g(h())))`.
func (c *PointClient) Intercept(interceptors ...Interceptor) {
	c.inters.Point = append(c.inters.Point, interceptors...)
}

// Create returns a builder for creating a Point entity.
func (c *PointClient) Create() *PointCreate {
	mutation := newPointMutation(c.config, OpCreate)
	return &PointCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Point entities.
func (c *PointClient) CreateBulk(builders ...*PointCreate) *PointCreateBulk {
	return &PointCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PointClient) MapCreateBulk(slice any, setFunc func(*PointCreate, int)) *PointCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PointCreateBulk{err: fmt.Errorf("calling to PointClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PointCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PointCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Point.
func (c *PointClient) Update() *PointUpdate {
	mutation := newPointMutation(c.config, OpUpdate)
	return &PointUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PointClient) UpdateOne(po *Point) *PointUpdateOne {
	mutation := newPointMutation(c.config, OpUpdateOne, withPoint(po))
	return &PointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PointClient) UpdateOneID(id int) *PointUpdateOne {
	mutation := newPointMutation(c.config, OpUpdateOne, withPointID(id))
	return &PointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Point.
func (c *PointClient) Delete() *PointDelete {
	mutation := newPointMutation(c.config, OpDelete)
	return &PointDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PointClient) DeleteOne(po *Point) *PointDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PointClient) DeleteOneID(id int) *PointDeleteOne {
	builder := c.Delete().Where(point.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PointDeleteOne{builder}
}

// Query returns a query builder for Point.
func (c *PointClient) Query() *PointQuery {
	return &PointQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePoint},
		inters: c.Interceptors(),
	}
}

// Get returns a Point entity by its id.
func (c *PointClient) Get(ctx context.Context, id int) (*Point, error) {
	return c.Query().Where(point.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PointClient) GetX(ctx context.Context, id int) *Point {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubtask queries the subtask edge of a Point.
func (c *PointClient) QuerySubtask(po *Point) *SubTaskQuery {
	query := (&SubTaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(point.Table, point.FieldID, id),
			sqlgraph.To(subtask.Table, subtask.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, point.SubtaskTable, point.SubtaskColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTask queries the task edge of a Point.
func (c *PointClient) QueryTask(po *Point) *TaskQuery {
	query := (&TaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(point.Table, point.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, point.TaskTable, point.TaskColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPointInfo queries the point_info edge of a Point.
func (c *PointClient) QueryPointInfo(po *Point) *PointInfoQuery {
	query := (&PointInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(point.Table, point.FieldID, id),
			sqlgraph.To(pointinfo.Table, pointinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, point.PointInfoTable, point.PointInfoColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PointClient) Hooks() []Hook {
	return c.hooks.Point
}

// Interceptors returns the client interceptors.
func (c *PointClient) Interceptors() []Interceptor {
	return c.inters.Point
}

func (c *PointClient) mutate(ctx context.Context, m *PointMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PointCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PointUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PointDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Point mutation op: %q", m.Op())
	}
}

// PointInfoClient is a client for the PointInfo schema.
type PointInfoClient struct {
	config
}

// NewPointInfoClient returns a client for the PointInfo from the given config.
func NewPointInfoClient(c config) *PointInfoClient {
	return &PointInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pointinfo.Hooks(f(g(h())))`.
func (c *PointInfoClient) Use(hooks ...Hook) {
	c.hooks.PointInfo = append(c.hooks.PointInfo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `pointinfo.Intercept(f(g(h())))`.
func (c *PointInfoClient) Intercept(interceptors ...Interceptor) {
	c.inters.PointInfo = append(c.inters.PointInfo, interceptors...)
}

// Create returns a builder for creating a PointInfo entity.
func (c *PointInfoClient) Create() *PointInfoCreate {
	mutation := newPointInfoMutation(c.config, OpCreate)
	return &PointInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PointInfo entities.
func (c *PointInfoClient) CreateBulk(builders ...*PointInfoCreate) *PointInfoCreateBulk {
	return &PointInfoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PointInfoClient) MapCreateBulk(slice any, setFunc func(*PointInfoCreate, int)) *PointInfoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PointInfoCreateBulk{err: fmt.Errorf("calling to PointInfoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PointInfoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PointInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PointInfo.
func (c *PointInfoClient) Update() *PointInfoUpdate {
	mutation := newPointInfoMutation(c.config, OpUpdate)
	return &PointInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PointInfoClient) UpdateOne(pi *PointInfo) *PointInfoUpdateOne {
	mutation := newPointInfoMutation(c.config, OpUpdateOne, withPointInfo(pi))
	return &PointInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PointInfoClient) UpdateOneID(id int) *PointInfoUpdateOne {
	mutation := newPointInfoMutation(c.config, OpUpdateOne, withPointInfoID(id))
	return &PointInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PointInfo.
func (c *PointInfoClient) Delete() *PointInfoDelete {
	mutation := newPointInfoMutation(c.config, OpDelete)
	return &PointInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PointInfoClient) DeleteOne(pi *PointInfo) *PointInfoDeleteOne {
	return c.DeleteOneID(pi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PointInfoClient) DeleteOneID(id int) *PointInfoDeleteOne {
	builder := c.Delete().Where(pointinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PointInfoDeleteOne{builder}
}

// Query returns a query builder for PointInfo.
func (c *PointInfoClient) Query() *PointInfoQuery {
	return &PointInfoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePointInfo},
		inters: c.Interceptors(),
	}
}

// Get returns a PointInfo entity by its id.
func (c *PointInfoClient) Get(ctx context.Context, id int) (*PointInfo, error) {
	return c.Query().Where(pointinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PointInfoClient) GetX(ctx context.Context, id int) *PointInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPoints queries the points edge of a PointInfo.
func (c *PointInfoClient) QueryPoints(pi *PointInfo) *PointQuery {
	query := (&PointClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pointinfo.Table, pointinfo.FieldID, id),
			sqlgraph.To(point.Table, point.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, pointinfo.PointsTable, pointinfo.PointsColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserID queries the user_id edge of a PointInfo.
func (c *PointInfoClient) QueryUserID(pi *PointInfo) *MemberQuery {
	query := (&MemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pointinfo.Table, pointinfo.FieldID, id),
			sqlgraph.To(member.Table, member.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, pointinfo.UserIDTable, pointinfo.UserIDColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PointInfoClient) Hooks() []Hook {
	return c.hooks.PointInfo
}

// Interceptors returns the client interceptors.
func (c *PointInfoClient) Interceptors() []Interceptor {
	return c.inters.PointInfo
}

func (c *PointInfoClient) mutate(ctx context.Context, m *PointInfoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PointInfoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PointInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PointInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PointInfoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PointInfo mutation op: %q", m.Op())
	}
}

// SubTaskClient is a client for the SubTask schema.
type SubTaskClient struct {
	config
}

// NewSubTaskClient returns a client for the SubTask from the given config.
func NewSubTaskClient(c config) *SubTaskClient {
	return &SubTaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subtask.Hooks(f(g(h())))`.
func (c *SubTaskClient) Use(hooks ...Hook) {
	c.hooks.SubTask = append(c.hooks.SubTask, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subtask.Intercept(f(g(h())))`.
func (c *SubTaskClient) Intercept(interceptors ...Interceptor) {
	c.inters.SubTask = append(c.inters.SubTask, interceptors...)
}

// Create returns a builder for creating a SubTask entity.
func (c *SubTaskClient) Create() *SubTaskCreate {
	mutation := newSubTaskMutation(c.config, OpCreate)
	return &SubTaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SubTask entities.
func (c *SubTaskClient) CreateBulk(builders ...*SubTaskCreate) *SubTaskCreateBulk {
	return &SubTaskCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SubTaskClient) MapCreateBulk(slice any, setFunc func(*SubTaskCreate, int)) *SubTaskCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SubTaskCreateBulk{err: fmt.Errorf("calling to SubTaskClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SubTaskCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SubTaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SubTask.
func (c *SubTaskClient) Update() *SubTaskUpdate {
	mutation := newSubTaskMutation(c.config, OpUpdate)
	return &SubTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubTaskClient) UpdateOne(st *SubTask) *SubTaskUpdateOne {
	mutation := newSubTaskMutation(c.config, OpUpdateOne, withSubTask(st))
	return &SubTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubTaskClient) UpdateOneID(id int) *SubTaskUpdateOne {
	mutation := newSubTaskMutation(c.config, OpUpdateOne, withSubTaskID(id))
	return &SubTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SubTask.
func (c *SubTaskClient) Delete() *SubTaskDelete {
	mutation := newSubTaskMutation(c.config, OpDelete)
	return &SubTaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubTaskClient) DeleteOne(st *SubTask) *SubTaskDeleteOne {
	return c.DeleteOneID(st.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubTaskClient) DeleteOneID(id int) *SubTaskDeleteOne {
	builder := c.Delete().Where(subtask.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubTaskDeleteOne{builder}
}

// Query returns a query builder for SubTask.
func (c *SubTaskClient) Query() *SubTaskQuery {
	return &SubTaskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubTask},
		inters: c.Interceptors(),
	}
}

// Get returns a SubTask entity by its id.
func (c *SubTaskClient) Get(ctx context.Context, id int) (*SubTask, error) {
	return c.Query().Where(subtask.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubTaskClient) GetX(ctx context.Context, id int) *SubTask {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPoint queries the point edge of a SubTask.
func (c *SubTaskClient) QueryPoint(st *SubTask) *PointQuery {
	query := (&PointClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subtask.Table, subtask.FieldID, id),
			sqlgraph.To(point.Table, point.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, subtask.PointTable, subtask.PointColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTask queries the task edge of a SubTask.
func (c *SubTaskClient) QueryTask(st *SubTask) *TaskQuery {
	query := (&TaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subtask.Table, subtask.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, subtask.TaskTable, subtask.TaskColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubTaskClient) Hooks() []Hook {
	return c.hooks.SubTask
}

// Interceptors returns the client interceptors.
func (c *SubTaskClient) Interceptors() []Interceptor {
	return c.inters.SubTask
}

func (c *SubTaskClient) mutate(ctx context.Context, m *SubTaskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubTaskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubTaskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SubTask mutation op: %q", m.Op())
	}
}

// TaskClient is a client for the Task schema.
type TaskClient struct {
	config
}

// NewTaskClient returns a client for the Task from the given config.
func NewTaskClient(c config) *TaskClient {
	return &TaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `task.Hooks(f(g(h())))`.
func (c *TaskClient) Use(hooks ...Hook) {
	c.hooks.Task = append(c.hooks.Task, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `task.Intercept(f(g(h())))`.
func (c *TaskClient) Intercept(interceptors ...Interceptor) {
	c.inters.Task = append(c.inters.Task, interceptors...)
}

// Create returns a builder for creating a Task entity.
func (c *TaskClient) Create() *TaskCreate {
	mutation := newTaskMutation(c.config, OpCreate)
	return &TaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Task entities.
func (c *TaskClient) CreateBulk(builders ...*TaskCreate) *TaskCreateBulk {
	return &TaskCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TaskClient) MapCreateBulk(slice any, setFunc func(*TaskCreate, int)) *TaskCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TaskCreateBulk{err: fmt.Errorf("calling to TaskClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TaskCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Task.
func (c *TaskClient) Update() *TaskUpdate {
	mutation := newTaskMutation(c.config, OpUpdate)
	return &TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskClient) UpdateOne(t *Task) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTask(t))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskClient) UpdateOneID(id int) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTaskID(id))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Task.
func (c *TaskClient) Delete() *TaskDelete {
	mutation := newTaskMutation(c.config, OpDelete)
	return &TaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TaskClient) DeleteOne(t *Task) *TaskDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TaskClient) DeleteOneID(id int) *TaskDeleteOne {
	builder := c.Delete().Where(task.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskDeleteOne{builder}
}

// Query returns a query builder for Task.
func (c *TaskClient) Query() *TaskQuery {
	return &TaskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTask},
		inters: c.Interceptors(),
	}
}

// Get returns a Task entity by its id.
func (c *TaskClient) Get(ctx context.Context, id int) (*Task, error) {
	return c.Query().Where(task.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskClient) GetX(ctx context.Context, id int) *Task {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubtask queries the subtask edge of a Task.
func (c *TaskClient) QuerySubtask(t *Task) *SubTaskQuery {
	query := (&SubTaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(subtask.Table, subtask.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, task.SubtaskTable, task.SubtaskColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySuccessPoint queries the success_point edge of a Task.
func (c *TaskClient) QuerySuccessPoint(t *Task) *PointQuery {
	query := (&PointClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(point.Table, point.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, task.SuccessPointTable, task.SuccessPointColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserID queries the user_id edge of a Task.
func (c *TaskClient) QueryUserID(t *Task) *MemberQuery {
	query := (&MemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(member.Table, member.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, task.UserIDTable, task.UserIDPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TaskClient) Hooks() []Hook {
	return c.hooks.Task
}

// Interceptors returns the client interceptors.
func (c *TaskClient) Interceptors() []Interceptor {
	return c.inters.Task
}

func (c *TaskClient) mutate(ctx context.Context, m *TaskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TaskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TaskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Task mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Member, Point, PointInfo, SubTask, Task []ent.Hook
	}
	inters struct {
		Member, Point, PointInfo, SubTask, Task []ent.Interceptor
	}
)
