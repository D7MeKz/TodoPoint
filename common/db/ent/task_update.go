// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"todopoint/common/db/ent/member"
	"todopoint/common/db/ent/point"
	"todopoint/common/db/ent/predicate"
	"todopoint/common/db/ent/subtask"
	"todopoint/common/db/ent/task"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskMutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetTitle sets the "title" field.
func (tu *TaskUpdate) SetTitle(s string) *TaskUpdate {
	tu.mutation.SetTitle(s)
	return tu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTitle(s *string) *TaskUpdate {
	if s != nil {
		tu.SetTitle(*s)
	}
	return tu
}

// SetTotalStatus sets the "total_status" field.
func (tu *TaskUpdate) SetTotalStatus(i int) *TaskUpdate {
	tu.mutation.ResetTotalStatus()
	tu.mutation.SetTotalStatus(i)
	return tu
}

// SetNillableTotalStatus sets the "total_status" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTotalStatus(i *int) *TaskUpdate {
	if i != nil {
		tu.SetTotalStatus(*i)
	}
	return tu
}

// AddTotalStatus adds i to the "total_status" field.
func (tu *TaskUpdate) AddTotalStatus(i int) *TaskUpdate {
	tu.mutation.AddTotalStatus(i)
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TaskUpdate) SetCreatedAt(t time.Time) *TaskUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCreatedAt(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetModifiedAt sets the "modified_at" field.
func (tu *TaskUpdate) SetModifiedAt(t time.Time) *TaskUpdate {
	tu.mutation.SetModifiedAt(t)
	return tu
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableModifiedAt(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetModifiedAt(*t)
	}
	return tu
}

// AddSubtaskIDs adds the "subtask" edge to the SubTask entity by IDs.
func (tu *TaskUpdate) AddSubtaskIDs(ids ...int) *TaskUpdate {
	tu.mutation.AddSubtaskIDs(ids...)
	return tu
}

// AddSubtask adds the "subtask" edges to the SubTask entity.
func (tu *TaskUpdate) AddSubtask(s ...*SubTask) *TaskUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.AddSubtaskIDs(ids...)
}

// SetPointID sets the "point" edge to the Point entity by ID.
func (tu *TaskUpdate) SetPointID(id int) *TaskUpdate {
	tu.mutation.SetPointID(id)
	return tu
}

// SetNillablePointID sets the "point" edge to the Point entity by ID if the given value is not nil.
func (tu *TaskUpdate) SetNillablePointID(id *int) *TaskUpdate {
	if id != nil {
		tu = tu.SetPointID(*id)
	}
	return tu
}

// SetPoint sets the "point" edge to the Point entity.
func (tu *TaskUpdate) SetPoint(p *Point) *TaskUpdate {
	return tu.SetPointID(p.ID)
}

// SetMemberID sets the "member" edge to the Member entity by ID.
func (tu *TaskUpdate) SetMemberID(id int) *TaskUpdate {
	tu.mutation.SetMemberID(id)
	return tu
}

// SetNillableMemberID sets the "member" edge to the Member entity by ID if the given value is not nil.
func (tu *TaskUpdate) SetNillableMemberID(id *int) *TaskUpdate {
	if id != nil {
		tu = tu.SetMemberID(*id)
	}
	return tu
}

// SetMember sets the "member" edge to the Member entity.
func (tu *TaskUpdate) SetMember(m *Member) *TaskUpdate {
	return tu.SetMemberID(m.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// ClearSubtask clears all "subtask" edges to the SubTask entity.
func (tu *TaskUpdate) ClearSubtask() *TaskUpdate {
	tu.mutation.ClearSubtask()
	return tu
}

// RemoveSubtaskIDs removes the "subtask" edge to SubTask entities by IDs.
func (tu *TaskUpdate) RemoveSubtaskIDs(ids ...int) *TaskUpdate {
	tu.mutation.RemoveSubtaskIDs(ids...)
	return tu
}

// RemoveSubtask removes "subtask" edges to SubTask entities.
func (tu *TaskUpdate) RemoveSubtask(s ...*SubTask) *TaskUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.RemoveSubtaskIDs(ids...)
}

// ClearPoint clears the "point" edge to the Point entity.
func (tu *TaskUpdate) ClearPoint() *TaskUpdate {
	tu.mutation.ClearPoint()
	return tu
}

// ClearMember clears the "member" edge to the Member entity.
func (tu *TaskUpdate) ClearMember() *TaskUpdate {
	tu.mutation.ClearMember()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
	}
	if value, ok := tu.mutation.TotalStatus(); ok {
		_spec.SetField(task.FieldTotalStatus, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedTotalStatus(); ok {
		_spec.AddField(task.FieldTotalStatus, field.TypeInt, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.ModifiedAt(); ok {
		_spec.SetField(task.FieldModifiedAt, field.TypeTime, value)
	}
	if tu.mutation.SubtaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubtaskTable,
			Columns: []string{task.SubtaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subtask.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedSubtaskIDs(); len(nodes) > 0 && !tu.mutation.SubtaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubtaskTable,
			Columns: []string{task.SubtaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subtask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.SubtaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubtaskTable,
			Columns: []string{task.SubtaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subtask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.PointCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   task.PointTable,
			Columns: []string{task.PointColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(point.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.PointIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   task.PointTable,
			Columns: []string{task.PointColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(point.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.MemberTable,
			Columns: []string{task.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.MemberTable,
			Columns: []string{task.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskMutation
}

// SetTitle sets the "title" field.
func (tuo *TaskUpdateOne) SetTitle(s string) *TaskUpdateOne {
	tuo.mutation.SetTitle(s)
	return tuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTitle(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetTitle(*s)
	}
	return tuo
}

// SetTotalStatus sets the "total_status" field.
func (tuo *TaskUpdateOne) SetTotalStatus(i int) *TaskUpdateOne {
	tuo.mutation.ResetTotalStatus()
	tuo.mutation.SetTotalStatus(i)
	return tuo
}

// SetNillableTotalStatus sets the "total_status" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTotalStatus(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetTotalStatus(*i)
	}
	return tuo
}

// AddTotalStatus adds i to the "total_status" field.
func (tuo *TaskUpdateOne) AddTotalStatus(i int) *TaskUpdateOne {
	tuo.mutation.AddTotalStatus(i)
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TaskUpdateOne) SetCreatedAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCreatedAt(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetModifiedAt sets the "modified_at" field.
func (tuo *TaskUpdateOne) SetModifiedAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetModifiedAt(t)
	return tuo
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableModifiedAt(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetModifiedAt(*t)
	}
	return tuo
}

// AddSubtaskIDs adds the "subtask" edge to the SubTask entity by IDs.
func (tuo *TaskUpdateOne) AddSubtaskIDs(ids ...int) *TaskUpdateOne {
	tuo.mutation.AddSubtaskIDs(ids...)
	return tuo
}

// AddSubtask adds the "subtask" edges to the SubTask entity.
func (tuo *TaskUpdateOne) AddSubtask(s ...*SubTask) *TaskUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.AddSubtaskIDs(ids...)
}

// SetPointID sets the "point" edge to the Point entity by ID.
func (tuo *TaskUpdateOne) SetPointID(id int) *TaskUpdateOne {
	tuo.mutation.SetPointID(id)
	return tuo
}

// SetNillablePointID sets the "point" edge to the Point entity by ID if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillablePointID(id *int) *TaskUpdateOne {
	if id != nil {
		tuo = tuo.SetPointID(*id)
	}
	return tuo
}

// SetPoint sets the "point" edge to the Point entity.
func (tuo *TaskUpdateOne) SetPoint(p *Point) *TaskUpdateOne {
	return tuo.SetPointID(p.ID)
}

// SetMemberID sets the "member" edge to the Member entity by ID.
func (tuo *TaskUpdateOne) SetMemberID(id int) *TaskUpdateOne {
	tuo.mutation.SetMemberID(id)
	return tuo
}

// SetNillableMemberID sets the "member" edge to the Member entity by ID if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableMemberID(id *int) *TaskUpdateOne {
	if id != nil {
		tuo = tuo.SetMemberID(*id)
	}
	return tuo
}

// SetMember sets the "member" edge to the Member entity.
func (tuo *TaskUpdateOne) SetMember(m *Member) *TaskUpdateOne {
	return tuo.SetMemberID(m.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// ClearSubtask clears all "subtask" edges to the SubTask entity.
func (tuo *TaskUpdateOne) ClearSubtask() *TaskUpdateOne {
	tuo.mutation.ClearSubtask()
	return tuo
}

// RemoveSubtaskIDs removes the "subtask" edge to SubTask entities by IDs.
func (tuo *TaskUpdateOne) RemoveSubtaskIDs(ids ...int) *TaskUpdateOne {
	tuo.mutation.RemoveSubtaskIDs(ids...)
	return tuo
}

// RemoveSubtask removes "subtask" edges to SubTask entities.
func (tuo *TaskUpdateOne) RemoveSubtask(s ...*SubTask) *TaskUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.RemoveSubtaskIDs(ids...)
}

// ClearPoint clears the "point" edge to the Point entity.
func (tuo *TaskUpdateOne) ClearPoint() *TaskUpdateOne {
	tuo.mutation.ClearPoint()
	return tuo
}

// ClearMember clears the "member" edge to the Member entity.
func (tuo *TaskUpdateOne) ClearMember() *TaskUpdateOne {
	tuo.mutation.ClearMember()
	return tuo
}

// Where appends a list predicates to the TaskUpdate builder.
func (tuo *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
	}
	if value, ok := tuo.mutation.TotalStatus(); ok {
		_spec.SetField(task.FieldTotalStatus, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedTotalStatus(); ok {
		_spec.AddField(task.FieldTotalStatus, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.ModifiedAt(); ok {
		_spec.SetField(task.FieldModifiedAt, field.TypeTime, value)
	}
	if tuo.mutation.SubtaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubtaskTable,
			Columns: []string{task.SubtaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subtask.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedSubtaskIDs(); len(nodes) > 0 && !tuo.mutation.SubtaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubtaskTable,
			Columns: []string{task.SubtaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subtask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.SubtaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubtaskTable,
			Columns: []string{task.SubtaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subtask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.PointCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   task.PointTable,
			Columns: []string{task.PointColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(point.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.PointIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   task.PointTable,
			Columns: []string{task.PointColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(point.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.MemberTable,
			Columns: []string{task.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.MemberTable,
			Columns: []string{task.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
