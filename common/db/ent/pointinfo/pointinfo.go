// Code generated by ent, DO NOT EDIT.

package pointinfo

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the pointinfo type in the database.
	Label = "point_info"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTotalPoints holds the string denoting the total_points field in the database.
	FieldTotalPoints = "total_points"
	// FieldModifiedAt holds the string denoting the modified_at field in the database.
	FieldModifiedAt = "modified_at"
	// EdgePoints holds the string denoting the points edge name in mutations.
	EdgePoints = "points"
	// EdgeUserID holds the string denoting the user_id edge name in mutations.
	EdgeUserID = "user_id"
	// Table holds the table name of the pointinfo in the database.
	Table = "point_infos"
	// PointsTable is the table that holds the points relation/edge.
	PointsTable = "points"
	// PointsInverseTable is the table name for the Point entity.
	// It exists in this package in order to avoid circular dependency with the "point" package.
	PointsInverseTable = "points"
	// PointsColumn is the table column denoting the points relation/edge.
	PointsColumn = "point_info_points"
	// UserIDTable is the table that holds the user_id relation/edge.
	UserIDTable = "point_infos"
	// UserIDInverseTable is the table name for the Member entity.
	// It exists in this package in order to avoid circular dependency with the "member" package.
	UserIDInverseTable = "members"
	// UserIDColumn is the table column denoting the user_id relation/edge.
	UserIDColumn = "member_point_info"
)

// Columns holds all SQL columns for pointinfo fields.
var Columns = []string{
	FieldID,
	FieldTotalPoints,
	FieldModifiedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "point_infos"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"member_point_info",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultModifiedAt holds the default value on creation for the "modified_at" field.
	DefaultModifiedAt time.Time
)

// OrderOption defines the ordering options for the PointInfo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTotalPoints orders the results by the total_points field.
func ByTotalPoints(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalPoints, opts...).ToFunc()
}

// ByModifiedAt orders the results by the modified_at field.
func ByModifiedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifiedAt, opts...).ToFunc()
}

// ByPointsCount orders the results by points count.
func ByPointsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPointsStep(), opts...)
	}
}

// ByPoints orders the results by points terms.
func ByPoints(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPointsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserIDField orders the results by user_id field.
func ByUserIDField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserIDStep(), sql.OrderByField(field, opts...))
	}
}
func newPointsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PointsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PointsTable, PointsColumn),
	)
}
func newUserIDStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserIDInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserIDTable, UserIDColumn),
	)
}
