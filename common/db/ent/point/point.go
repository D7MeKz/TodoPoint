// Code generated by ent, DO NOT EDIT.

package point

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the point type in the database.
	Label = "point"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPoint holds the string denoting the point field in the database.
	FieldPoint = "point"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeSubtask holds the string denoting the subtask edge name in mutations.
	EdgeSubtask = "subtask"
	// EdgeTask holds the string denoting the task edge name in mutations.
	EdgeTask = "task"
	// EdgePointInfo holds the string denoting the point_info edge name in mutations.
	EdgePointInfo = "point_info"
	// Table holds the table name of the point in the database.
	Table = "points"
	// SubtaskTable is the table that holds the subtask relation/edge.
	SubtaskTable = "points"
	// SubtaskInverseTable is the table name for the SubTask entity.
	// It exists in this package in order to avoid circular dependency with the "subtask" package.
	SubtaskInverseTable = "sub_tasks"
	// SubtaskColumn is the table column denoting the subtask relation/edge.
	SubtaskColumn = "sub_task_point"
	// TaskTable is the table that holds the task relation/edge.
	TaskTable = "points"
	// TaskInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TaskInverseTable = "tasks"
	// TaskColumn is the table column denoting the task relation/edge.
	TaskColumn = "task_point"
	// PointInfoTable is the table that holds the point_info relation/edge.
	PointInfoTable = "points"
	// PointInfoInverseTable is the table name for the PointInfo entity.
	// It exists in this package in order to avoid circular dependency with the "pointinfo" package.
	PointInfoInverseTable = "point_infos"
	// PointInfoColumn is the table column denoting the point_info relation/edge.
	PointInfoColumn = "point_info_points"
)

// Columns holds all SQL columns for point fields.
var Columns = []string{
	FieldID,
	FieldPoint,
	FieldType,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "points"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"point_info_points",
	"sub_task_point",
	"task_point",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
)

// OrderOption defines the ordering options for the Point queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPoint orders the results by the point field.
func ByPoint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPoint, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// BySubtaskField orders the results by subtask field.
func BySubtaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubtaskStep(), sql.OrderByField(field, opts...))
	}
}

// ByTaskField orders the results by task field.
func ByTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskStep(), sql.OrderByField(field, opts...))
	}
}

// ByPointInfoField orders the results by point_info field.
func ByPointInfoField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPointInfoStep(), sql.OrderByField(field, opts...))
	}
}
func newSubtaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubtaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, SubtaskTable, SubtaskColumn),
	)
}
func newTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, TaskTable, TaskColumn),
	)
}
func newPointInfoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PointInfoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PointInfoTable, PointInfoColumn),
	)
}
