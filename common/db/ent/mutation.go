// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"
	"todopoint/common/db/ent/member"
	"todopoint/common/db/ent/point"
	"todopoint/common/db/ent/pointinfo"
	"todopoint/common/db/ent/predicate"
	"todopoint/common/db/ent/subtask"
	"todopoint/common/db/ent/task"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMember    = "Member"
	TypePoint     = "Point"
	TypePointInfo = "PointInfo"
	TypeSubTask   = "SubTask"
	TypeTask      = "Task"
)

// MemberMutation represents an operation that mutates the Member nodes in the graph.
type MemberMutation struct {
	config
	op                Op
	typ               string
	id                *int
	email             *string
	username          *string
	password          *string
	created_at        *time.Time
	clearedFields     map[string]struct{}
	point_info        map[int]struct{}
	removedpoint_info map[int]struct{}
	clearedpoint_info bool
	tasks             map[int]struct{}
	removedtasks      map[int]struct{}
	clearedtasks      bool
	done              bool
	oldValue          func(context.Context) (*Member, error)
	predicates        []predicate.Member
}

var _ ent.Mutation = (*MemberMutation)(nil)

// memberOption allows management of the mutation configuration using functional options.
type memberOption func(*MemberMutation)

// newMemberMutation creates new mutation for the Member entity.
func newMemberMutation(c config, op Op, opts ...memberOption) *MemberMutation {
	m := &MemberMutation{
		config:        c,
		op:            op,
		typ:           TypeMember,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMemberID sets the ID field of the mutation.
func withMemberID(id int) memberOption {
	return func(m *MemberMutation) {
		var (
			err   error
			once  sync.Once
			value *Member
		)
		m.oldValue = func(ctx context.Context) (*Member, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Member.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMember sets the old Member of the mutation.
func withMember(node *Member) memberOption {
	return func(m *MemberMutation) {
		m.oldValue = func(context.Context) (*Member, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MemberMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MemberMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Member entities.
func (m *MemberMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MemberMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MemberMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Member.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEmail sets the "email" field.
func (m *MemberMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *MemberMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *MemberMutation) ResetEmail() {
	m.email = nil
}

// SetUsername sets the "username" field.
func (m *MemberMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *MemberMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *MemberMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *MemberMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *MemberMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *MemberMutation) ResetPassword() {
	m.password = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *MemberMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MemberMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MemberMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddPointInfoIDs adds the "point_info" edge to the PointInfo entity by ids.
func (m *MemberMutation) AddPointInfoIDs(ids ...int) {
	if m.point_info == nil {
		m.point_info = make(map[int]struct{})
	}
	for i := range ids {
		m.point_info[ids[i]] = struct{}{}
	}
}

// ClearPointInfo clears the "point_info" edge to the PointInfo entity.
func (m *MemberMutation) ClearPointInfo() {
	m.clearedpoint_info = true
}

// PointInfoCleared reports if the "point_info" edge to the PointInfo entity was cleared.
func (m *MemberMutation) PointInfoCleared() bool {
	return m.clearedpoint_info
}

// RemovePointInfoIDs removes the "point_info" edge to the PointInfo entity by IDs.
func (m *MemberMutation) RemovePointInfoIDs(ids ...int) {
	if m.removedpoint_info == nil {
		m.removedpoint_info = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.point_info, ids[i])
		m.removedpoint_info[ids[i]] = struct{}{}
	}
}

// RemovedPointInfo returns the removed IDs of the "point_info" edge to the PointInfo entity.
func (m *MemberMutation) RemovedPointInfoIDs() (ids []int) {
	for id := range m.removedpoint_info {
		ids = append(ids, id)
	}
	return
}

// PointInfoIDs returns the "point_info" edge IDs in the mutation.
func (m *MemberMutation) PointInfoIDs() (ids []int) {
	for id := range m.point_info {
		ids = append(ids, id)
	}
	return
}

// ResetPointInfo resets all changes to the "point_info" edge.
func (m *MemberMutation) ResetPointInfo() {
	m.point_info = nil
	m.clearedpoint_info = false
	m.removedpoint_info = nil
}

// AddTaskIDs adds the "tasks" edge to the Task entity by ids.
func (m *MemberMutation) AddTaskIDs(ids ...int) {
	if m.tasks == nil {
		m.tasks = make(map[int]struct{})
	}
	for i := range ids {
		m.tasks[ids[i]] = struct{}{}
	}
}

// ClearTasks clears the "tasks" edge to the Task entity.
func (m *MemberMutation) ClearTasks() {
	m.clearedtasks = true
}

// TasksCleared reports if the "tasks" edge to the Task entity was cleared.
func (m *MemberMutation) TasksCleared() bool {
	return m.clearedtasks
}

// RemoveTaskIDs removes the "tasks" edge to the Task entity by IDs.
func (m *MemberMutation) RemoveTaskIDs(ids ...int) {
	if m.removedtasks == nil {
		m.removedtasks = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tasks, ids[i])
		m.removedtasks[ids[i]] = struct{}{}
	}
}

// RemovedTasks returns the removed IDs of the "tasks" edge to the Task entity.
func (m *MemberMutation) RemovedTasksIDs() (ids []int) {
	for id := range m.removedtasks {
		ids = append(ids, id)
	}
	return
}

// TasksIDs returns the "tasks" edge IDs in the mutation.
func (m *MemberMutation) TasksIDs() (ids []int) {
	for id := range m.tasks {
		ids = append(ids, id)
	}
	return
}

// ResetTasks resets all changes to the "tasks" edge.
func (m *MemberMutation) ResetTasks() {
	m.tasks = nil
	m.clearedtasks = false
	m.removedtasks = nil
}

// Where appends a list predicates to the MemberMutation builder.
func (m *MemberMutation) Where(ps ...predicate.Member) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MemberMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MemberMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Member, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MemberMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MemberMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Member).
func (m *MemberMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MemberMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.email != nil {
		fields = append(fields, member.FieldEmail)
	}
	if m.username != nil {
		fields = append(fields, member.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, member.FieldPassword)
	}
	if m.created_at != nil {
		fields = append(fields, member.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MemberMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case member.FieldEmail:
		return m.Email()
	case member.FieldUsername:
		return m.Username()
	case member.FieldPassword:
		return m.Password()
	case member.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MemberMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case member.FieldEmail:
		return m.OldEmail(ctx)
	case member.FieldUsername:
		return m.OldUsername(ctx)
	case member.FieldPassword:
		return m.OldPassword(ctx)
	case member.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Member field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MemberMutation) SetField(name string, value ent.Value) error {
	switch name {
	case member.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case member.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case member.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case member.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Member field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MemberMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MemberMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MemberMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Member numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MemberMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MemberMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MemberMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Member nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MemberMutation) ResetField(name string) error {
	switch name {
	case member.FieldEmail:
		m.ResetEmail()
		return nil
	case member.FieldUsername:
		m.ResetUsername()
		return nil
	case member.FieldPassword:
		m.ResetPassword()
		return nil
	case member.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Member field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MemberMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.point_info != nil {
		edges = append(edges, member.EdgePointInfo)
	}
	if m.tasks != nil {
		edges = append(edges, member.EdgeTasks)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MemberMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case member.EdgePointInfo:
		ids := make([]ent.Value, 0, len(m.point_info))
		for id := range m.point_info {
			ids = append(ids, id)
		}
		return ids
	case member.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.tasks))
		for id := range m.tasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MemberMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedpoint_info != nil {
		edges = append(edges, member.EdgePointInfo)
	}
	if m.removedtasks != nil {
		edges = append(edges, member.EdgeTasks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MemberMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case member.EdgePointInfo:
		ids := make([]ent.Value, 0, len(m.removedpoint_info))
		for id := range m.removedpoint_info {
			ids = append(ids, id)
		}
		return ids
	case member.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.removedtasks))
		for id := range m.removedtasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MemberMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedpoint_info {
		edges = append(edges, member.EdgePointInfo)
	}
	if m.clearedtasks {
		edges = append(edges, member.EdgeTasks)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MemberMutation) EdgeCleared(name string) bool {
	switch name {
	case member.EdgePointInfo:
		return m.clearedpoint_info
	case member.EdgeTasks:
		return m.clearedtasks
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MemberMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Member unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MemberMutation) ResetEdge(name string) error {
	switch name {
	case member.EdgePointInfo:
		m.ResetPointInfo()
		return nil
	case member.EdgeTasks:
		m.ResetTasks()
		return nil
	}
	return fmt.Errorf("unknown Member edge %s", name)
}

// PointMutation represents an operation that mutates the Point nodes in the graph.
type PointMutation struct {
	config
	op                Op
	typ               string
	id                *int
	point             *int
	addpoint          *int
	_type             *string
	created_at        *time.Time
	clearedFields     map[string]struct{}
	subtask           *int
	clearedsubtask    bool
	task              *int
	clearedtask       bool
	point_info        *int
	clearedpoint_info bool
	done              bool
	oldValue          func(context.Context) (*Point, error)
	predicates        []predicate.Point
}

var _ ent.Mutation = (*PointMutation)(nil)

// pointOption allows management of the mutation configuration using functional options.
type pointOption func(*PointMutation)

// newPointMutation creates new mutation for the Point entity.
func newPointMutation(c config, op Op, opts ...pointOption) *PointMutation {
	m := &PointMutation{
		config:        c,
		op:            op,
		typ:           TypePoint,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPointID sets the ID field of the mutation.
func withPointID(id int) pointOption {
	return func(m *PointMutation) {
		var (
			err   error
			once  sync.Once
			value *Point
		)
		m.oldValue = func(ctx context.Context) (*Point, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Point.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPoint sets the old Point of the mutation.
func withPoint(node *Point) pointOption {
	return func(m *PointMutation) {
		m.oldValue = func(context.Context) (*Point, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PointMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PointMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Point entities.
func (m *PointMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PointMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PointMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Point.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPoint sets the "point" field.
func (m *PointMutation) SetPoint(i int) {
	m.point = &i
	m.addpoint = nil
}

// Point returns the value of the "point" field in the mutation.
func (m *PointMutation) Point() (r int, exists bool) {
	v := m.point
	if v == nil {
		return
	}
	return *v, true
}

// OldPoint returns the old "point" field's value of the Point entity.
// If the Point object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PointMutation) OldPoint(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPoint is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPoint requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPoint: %w", err)
	}
	return oldValue.Point, nil
}

// AddPoint adds i to the "point" field.
func (m *PointMutation) AddPoint(i int) {
	if m.addpoint != nil {
		*m.addpoint += i
	} else {
		m.addpoint = &i
	}
}

// AddedPoint returns the value that was added to the "point" field in this mutation.
func (m *PointMutation) AddedPoint() (r int, exists bool) {
	v := m.addpoint
	if v == nil {
		return
	}
	return *v, true
}

// ResetPoint resets all changes to the "point" field.
func (m *PointMutation) ResetPoint() {
	m.point = nil
	m.addpoint = nil
}

// SetType sets the "type" field.
func (m *PointMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *PointMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Point entity.
// If the Point object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PointMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *PointMutation) ResetType() {
	m._type = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PointMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PointMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Point entity.
// If the Point object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PointMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PointMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetSubtaskID sets the "subtask" edge to the SubTask entity by id.
func (m *PointMutation) SetSubtaskID(id int) {
	m.subtask = &id
}

// ClearSubtask clears the "subtask" edge to the SubTask entity.
func (m *PointMutation) ClearSubtask() {
	m.clearedsubtask = true
}

// SubtaskCleared reports if the "subtask" edge to the SubTask entity was cleared.
func (m *PointMutation) SubtaskCleared() bool {
	return m.clearedsubtask
}

// SubtaskID returns the "subtask" edge ID in the mutation.
func (m *PointMutation) SubtaskID() (id int, exists bool) {
	if m.subtask != nil {
		return *m.subtask, true
	}
	return
}

// SubtaskIDs returns the "subtask" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubtaskID instead. It exists only for internal usage by the builders.
func (m *PointMutation) SubtaskIDs() (ids []int) {
	if id := m.subtask; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubtask resets all changes to the "subtask" edge.
func (m *PointMutation) ResetSubtask() {
	m.subtask = nil
	m.clearedsubtask = false
}

// SetTaskID sets the "task" edge to the Task entity by id.
func (m *PointMutation) SetTaskID(id int) {
	m.task = &id
}

// ClearTask clears the "task" edge to the Task entity.
func (m *PointMutation) ClearTask() {
	m.clearedtask = true
}

// TaskCleared reports if the "task" edge to the Task entity was cleared.
func (m *PointMutation) TaskCleared() bool {
	return m.clearedtask
}

// TaskID returns the "task" edge ID in the mutation.
func (m *PointMutation) TaskID() (id int, exists bool) {
	if m.task != nil {
		return *m.task, true
	}
	return
}

// TaskIDs returns the "task" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TaskID instead. It exists only for internal usage by the builders.
func (m *PointMutation) TaskIDs() (ids []int) {
	if id := m.task; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTask resets all changes to the "task" edge.
func (m *PointMutation) ResetTask() {
	m.task = nil
	m.clearedtask = false
}

// SetPointInfoID sets the "point_info" edge to the PointInfo entity by id.
func (m *PointMutation) SetPointInfoID(id int) {
	m.point_info = &id
}

// ClearPointInfo clears the "point_info" edge to the PointInfo entity.
func (m *PointMutation) ClearPointInfo() {
	m.clearedpoint_info = true
}

// PointInfoCleared reports if the "point_info" edge to the PointInfo entity was cleared.
func (m *PointMutation) PointInfoCleared() bool {
	return m.clearedpoint_info
}

// PointInfoID returns the "point_info" edge ID in the mutation.
func (m *PointMutation) PointInfoID() (id int, exists bool) {
	if m.point_info != nil {
		return *m.point_info, true
	}
	return
}

// PointInfoIDs returns the "point_info" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PointInfoID instead. It exists only for internal usage by the builders.
func (m *PointMutation) PointInfoIDs() (ids []int) {
	if id := m.point_info; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPointInfo resets all changes to the "point_info" edge.
func (m *PointMutation) ResetPointInfo() {
	m.point_info = nil
	m.clearedpoint_info = false
}

// Where appends a list predicates to the PointMutation builder.
func (m *PointMutation) Where(ps ...predicate.Point) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PointMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PointMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Point, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PointMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PointMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Point).
func (m *PointMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PointMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.point != nil {
		fields = append(fields, point.FieldPoint)
	}
	if m._type != nil {
		fields = append(fields, point.FieldType)
	}
	if m.created_at != nil {
		fields = append(fields, point.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PointMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case point.FieldPoint:
		return m.Point()
	case point.FieldType:
		return m.GetType()
	case point.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PointMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case point.FieldPoint:
		return m.OldPoint(ctx)
	case point.FieldType:
		return m.OldType(ctx)
	case point.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Point field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PointMutation) SetField(name string, value ent.Value) error {
	switch name {
	case point.FieldPoint:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPoint(v)
		return nil
	case point.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case point.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Point field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PointMutation) AddedFields() []string {
	var fields []string
	if m.addpoint != nil {
		fields = append(fields, point.FieldPoint)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PointMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case point.FieldPoint:
		return m.AddedPoint()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PointMutation) AddField(name string, value ent.Value) error {
	switch name {
	case point.FieldPoint:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPoint(v)
		return nil
	}
	return fmt.Errorf("unknown Point numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PointMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PointMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PointMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Point nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PointMutation) ResetField(name string) error {
	switch name {
	case point.FieldPoint:
		m.ResetPoint()
		return nil
	case point.FieldType:
		m.ResetType()
		return nil
	case point.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Point field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PointMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.subtask != nil {
		edges = append(edges, point.EdgeSubtask)
	}
	if m.task != nil {
		edges = append(edges, point.EdgeTask)
	}
	if m.point_info != nil {
		edges = append(edges, point.EdgePointInfo)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PointMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case point.EdgeSubtask:
		if id := m.subtask; id != nil {
			return []ent.Value{*id}
		}
	case point.EdgeTask:
		if id := m.task; id != nil {
			return []ent.Value{*id}
		}
	case point.EdgePointInfo:
		if id := m.point_info; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PointMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PointMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PointMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedsubtask {
		edges = append(edges, point.EdgeSubtask)
	}
	if m.clearedtask {
		edges = append(edges, point.EdgeTask)
	}
	if m.clearedpoint_info {
		edges = append(edges, point.EdgePointInfo)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PointMutation) EdgeCleared(name string) bool {
	switch name {
	case point.EdgeSubtask:
		return m.clearedsubtask
	case point.EdgeTask:
		return m.clearedtask
	case point.EdgePointInfo:
		return m.clearedpoint_info
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PointMutation) ClearEdge(name string) error {
	switch name {
	case point.EdgeSubtask:
		m.ClearSubtask()
		return nil
	case point.EdgeTask:
		m.ClearTask()
		return nil
	case point.EdgePointInfo:
		m.ClearPointInfo()
		return nil
	}
	return fmt.Errorf("unknown Point unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PointMutation) ResetEdge(name string) error {
	switch name {
	case point.EdgeSubtask:
		m.ResetSubtask()
		return nil
	case point.EdgeTask:
		m.ResetTask()
		return nil
	case point.EdgePointInfo:
		m.ResetPointInfo()
		return nil
	}
	return fmt.Errorf("unknown Point edge %s", name)
}

// PointInfoMutation represents an operation that mutates the PointInfo nodes in the graph.
type PointInfoMutation struct {
	config
	op              Op
	typ             string
	id              *int
	total_points    *int64
	addtotal_points *int64
	modified_at     *time.Time
	clearedFields   map[string]struct{}
	points          map[int]struct{}
	removedpoints   map[int]struct{}
	clearedpoints   bool
	user_id         *int
	cleareduser_id  bool
	done            bool
	oldValue        func(context.Context) (*PointInfo, error)
	predicates      []predicate.PointInfo
}

var _ ent.Mutation = (*PointInfoMutation)(nil)

// pointinfoOption allows management of the mutation configuration using functional options.
type pointinfoOption func(*PointInfoMutation)

// newPointInfoMutation creates new mutation for the PointInfo entity.
func newPointInfoMutation(c config, op Op, opts ...pointinfoOption) *PointInfoMutation {
	m := &PointInfoMutation{
		config:        c,
		op:            op,
		typ:           TypePointInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPointInfoID sets the ID field of the mutation.
func withPointInfoID(id int) pointinfoOption {
	return func(m *PointInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *PointInfo
		)
		m.oldValue = func(ctx context.Context) (*PointInfo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PointInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPointInfo sets the old PointInfo of the mutation.
func withPointInfo(node *PointInfo) pointinfoOption {
	return func(m *PointInfoMutation) {
		m.oldValue = func(context.Context) (*PointInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PointInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PointInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PointInfo entities.
func (m *PointInfoMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PointInfoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PointInfoMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PointInfo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTotalPoints sets the "total_points" field.
func (m *PointInfoMutation) SetTotalPoints(i int64) {
	m.total_points = &i
	m.addtotal_points = nil
}

// TotalPoints returns the value of the "total_points" field in the mutation.
func (m *PointInfoMutation) TotalPoints() (r int64, exists bool) {
	v := m.total_points
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalPoints returns the old "total_points" field's value of the PointInfo entity.
// If the PointInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PointInfoMutation) OldTotalPoints(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalPoints is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalPoints requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalPoints: %w", err)
	}
	return oldValue.TotalPoints, nil
}

// AddTotalPoints adds i to the "total_points" field.
func (m *PointInfoMutation) AddTotalPoints(i int64) {
	if m.addtotal_points != nil {
		*m.addtotal_points += i
	} else {
		m.addtotal_points = &i
	}
}

// AddedTotalPoints returns the value that was added to the "total_points" field in this mutation.
func (m *PointInfoMutation) AddedTotalPoints() (r int64, exists bool) {
	v := m.addtotal_points
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotalPoints resets all changes to the "total_points" field.
func (m *PointInfoMutation) ResetTotalPoints() {
	m.total_points = nil
	m.addtotal_points = nil
}

// SetModifiedAt sets the "modified_at" field.
func (m *PointInfoMutation) SetModifiedAt(t time.Time) {
	m.modified_at = &t
}

// ModifiedAt returns the value of the "modified_at" field in the mutation.
func (m *PointInfoMutation) ModifiedAt() (r time.Time, exists bool) {
	v := m.modified_at
	if v == nil {
		return
	}
	return *v, true
}

// OldModifiedAt returns the old "modified_at" field's value of the PointInfo entity.
// If the PointInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PointInfoMutation) OldModifiedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModifiedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModifiedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifiedAt: %w", err)
	}
	return oldValue.ModifiedAt, nil
}

// ResetModifiedAt resets all changes to the "modified_at" field.
func (m *PointInfoMutation) ResetModifiedAt() {
	m.modified_at = nil
}

// AddPointIDs adds the "points" edge to the Point entity by ids.
func (m *PointInfoMutation) AddPointIDs(ids ...int) {
	if m.points == nil {
		m.points = make(map[int]struct{})
	}
	for i := range ids {
		m.points[ids[i]] = struct{}{}
	}
}

// ClearPoints clears the "points" edge to the Point entity.
func (m *PointInfoMutation) ClearPoints() {
	m.clearedpoints = true
}

// PointsCleared reports if the "points" edge to the Point entity was cleared.
func (m *PointInfoMutation) PointsCleared() bool {
	return m.clearedpoints
}

// RemovePointIDs removes the "points" edge to the Point entity by IDs.
func (m *PointInfoMutation) RemovePointIDs(ids ...int) {
	if m.removedpoints == nil {
		m.removedpoints = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.points, ids[i])
		m.removedpoints[ids[i]] = struct{}{}
	}
}

// RemovedPoints returns the removed IDs of the "points" edge to the Point entity.
func (m *PointInfoMutation) RemovedPointsIDs() (ids []int) {
	for id := range m.removedpoints {
		ids = append(ids, id)
	}
	return
}

// PointsIDs returns the "points" edge IDs in the mutation.
func (m *PointInfoMutation) PointsIDs() (ids []int) {
	for id := range m.points {
		ids = append(ids, id)
	}
	return
}

// ResetPoints resets all changes to the "points" edge.
func (m *PointInfoMutation) ResetPoints() {
	m.points = nil
	m.clearedpoints = false
	m.removedpoints = nil
}

// SetUserIDID sets the "user_id" edge to the Member entity by id.
func (m *PointInfoMutation) SetUserIDID(id int) {
	m.user_id = &id
}

// ClearUserID clears the "user_id" edge to the Member entity.
func (m *PointInfoMutation) ClearUserID() {
	m.cleareduser_id = true
}

// UserIDCleared reports if the "user_id" edge to the Member entity was cleared.
func (m *PointInfoMutation) UserIDCleared() bool {
	return m.cleareduser_id
}

// UserIDID returns the "user_id" edge ID in the mutation.
func (m *PointInfoMutation) UserIDID() (id int, exists bool) {
	if m.user_id != nil {
		return *m.user_id, true
	}
	return
}

// UserIDIDs returns the "user_id" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserIDID instead. It exists only for internal usage by the builders.
func (m *PointInfoMutation) UserIDIDs() (ids []int) {
	if id := m.user_id; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUserID resets all changes to the "user_id" edge.
func (m *PointInfoMutation) ResetUserID() {
	m.user_id = nil
	m.cleareduser_id = false
}

// Where appends a list predicates to the PointInfoMutation builder.
func (m *PointInfoMutation) Where(ps ...predicate.PointInfo) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PointInfoMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PointInfoMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PointInfo, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PointInfoMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PointInfoMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PointInfo).
func (m *PointInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PointInfoMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.total_points != nil {
		fields = append(fields, pointinfo.FieldTotalPoints)
	}
	if m.modified_at != nil {
		fields = append(fields, pointinfo.FieldModifiedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PointInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pointinfo.FieldTotalPoints:
		return m.TotalPoints()
	case pointinfo.FieldModifiedAt:
		return m.ModifiedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PointInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pointinfo.FieldTotalPoints:
		return m.OldTotalPoints(ctx)
	case pointinfo.FieldModifiedAt:
		return m.OldModifiedAt(ctx)
	}
	return nil, fmt.Errorf("unknown PointInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PointInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pointinfo.FieldTotalPoints:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalPoints(v)
		return nil
	case pointinfo.FieldModifiedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifiedAt(v)
		return nil
	}
	return fmt.Errorf("unknown PointInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PointInfoMutation) AddedFields() []string {
	var fields []string
	if m.addtotal_points != nil {
		fields = append(fields, pointinfo.FieldTotalPoints)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PointInfoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case pointinfo.FieldTotalPoints:
		return m.AddedTotalPoints()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PointInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case pointinfo.FieldTotalPoints:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalPoints(v)
		return nil
	}
	return fmt.Errorf("unknown PointInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PointInfoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PointInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PointInfoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PointInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PointInfoMutation) ResetField(name string) error {
	switch name {
	case pointinfo.FieldTotalPoints:
		m.ResetTotalPoints()
		return nil
	case pointinfo.FieldModifiedAt:
		m.ResetModifiedAt()
		return nil
	}
	return fmt.Errorf("unknown PointInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PointInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.points != nil {
		edges = append(edges, pointinfo.EdgePoints)
	}
	if m.user_id != nil {
		edges = append(edges, pointinfo.EdgeUserID)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PointInfoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case pointinfo.EdgePoints:
		ids := make([]ent.Value, 0, len(m.points))
		for id := range m.points {
			ids = append(ids, id)
		}
		return ids
	case pointinfo.EdgeUserID:
		if id := m.user_id; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PointInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedpoints != nil {
		edges = append(edges, pointinfo.EdgePoints)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PointInfoMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case pointinfo.EdgePoints:
		ids := make([]ent.Value, 0, len(m.removedpoints))
		for id := range m.removedpoints {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PointInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedpoints {
		edges = append(edges, pointinfo.EdgePoints)
	}
	if m.cleareduser_id {
		edges = append(edges, pointinfo.EdgeUserID)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PointInfoMutation) EdgeCleared(name string) bool {
	switch name {
	case pointinfo.EdgePoints:
		return m.clearedpoints
	case pointinfo.EdgeUserID:
		return m.cleareduser_id
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PointInfoMutation) ClearEdge(name string) error {
	switch name {
	case pointinfo.EdgeUserID:
		m.ClearUserID()
		return nil
	}
	return fmt.Errorf("unknown PointInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PointInfoMutation) ResetEdge(name string) error {
	switch name {
	case pointinfo.EdgePoints:
		m.ResetPoints()
		return nil
	case pointinfo.EdgeUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown PointInfo edge %s", name)
}

// SubTaskMutation represents an operation that mutates the SubTask nodes in the graph.
type SubTaskMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	point         *int
	clearedpoint  bool
	task          map[int]struct{}
	removedtask   map[int]struct{}
	clearedtask   bool
	done          bool
	oldValue      func(context.Context) (*SubTask, error)
	predicates    []predicate.SubTask
}

var _ ent.Mutation = (*SubTaskMutation)(nil)

// subtaskOption allows management of the mutation configuration using functional options.
type subtaskOption func(*SubTaskMutation)

// newSubTaskMutation creates new mutation for the SubTask entity.
func newSubTaskMutation(c config, op Op, opts ...subtaskOption) *SubTaskMutation {
	m := &SubTaskMutation{
		config:        c,
		op:            op,
		typ:           TypeSubTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubTaskID sets the ID field of the mutation.
func withSubTaskID(id int) subtaskOption {
	return func(m *SubTaskMutation) {
		var (
			err   error
			once  sync.Once
			value *SubTask
		)
		m.oldValue = func(ctx context.Context) (*SubTask, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SubTask.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubTask sets the old SubTask of the mutation.
func withSubTask(node *SubTask) subtaskOption {
	return func(m *SubTaskMutation) {
		m.oldValue = func(context.Context) (*SubTask, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubTaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubTaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SubTaskMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SubTaskMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SubTask.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPointID sets the "point" edge to the Point entity by id.
func (m *SubTaskMutation) SetPointID(id int) {
	m.point = &id
}

// ClearPoint clears the "point" edge to the Point entity.
func (m *SubTaskMutation) ClearPoint() {
	m.clearedpoint = true
}

// PointCleared reports if the "point" edge to the Point entity was cleared.
func (m *SubTaskMutation) PointCleared() bool {
	return m.clearedpoint
}

// PointID returns the "point" edge ID in the mutation.
func (m *SubTaskMutation) PointID() (id int, exists bool) {
	if m.point != nil {
		return *m.point, true
	}
	return
}

// PointIDs returns the "point" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PointID instead. It exists only for internal usage by the builders.
func (m *SubTaskMutation) PointIDs() (ids []int) {
	if id := m.point; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPoint resets all changes to the "point" edge.
func (m *SubTaskMutation) ResetPoint() {
	m.point = nil
	m.clearedpoint = false
}

// AddTaskIDs adds the "task" edge to the Task entity by ids.
func (m *SubTaskMutation) AddTaskIDs(ids ...int) {
	if m.task == nil {
		m.task = make(map[int]struct{})
	}
	for i := range ids {
		m.task[ids[i]] = struct{}{}
	}
}

// ClearTask clears the "task" edge to the Task entity.
func (m *SubTaskMutation) ClearTask() {
	m.clearedtask = true
}

// TaskCleared reports if the "task" edge to the Task entity was cleared.
func (m *SubTaskMutation) TaskCleared() bool {
	return m.clearedtask
}

// RemoveTaskIDs removes the "task" edge to the Task entity by IDs.
func (m *SubTaskMutation) RemoveTaskIDs(ids ...int) {
	if m.removedtask == nil {
		m.removedtask = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.task, ids[i])
		m.removedtask[ids[i]] = struct{}{}
	}
}

// RemovedTask returns the removed IDs of the "task" edge to the Task entity.
func (m *SubTaskMutation) RemovedTaskIDs() (ids []int) {
	for id := range m.removedtask {
		ids = append(ids, id)
	}
	return
}

// TaskIDs returns the "task" edge IDs in the mutation.
func (m *SubTaskMutation) TaskIDs() (ids []int) {
	for id := range m.task {
		ids = append(ids, id)
	}
	return
}

// ResetTask resets all changes to the "task" edge.
func (m *SubTaskMutation) ResetTask() {
	m.task = nil
	m.clearedtask = false
	m.removedtask = nil
}

// Where appends a list predicates to the SubTaskMutation builder.
func (m *SubTaskMutation) Where(ps ...predicate.SubTask) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SubTaskMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SubTaskMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SubTask, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SubTaskMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SubTaskMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SubTask).
func (m *SubTaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubTaskMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubTaskMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubTaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown SubTask field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubTaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SubTask field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubTaskMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubTaskMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubTaskMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown SubTask numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubTaskMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubTaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubTaskMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SubTask nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubTaskMutation) ResetField(name string) error {
	return fmt.Errorf("unknown SubTask field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubTaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.point != nil {
		edges = append(edges, subtask.EdgePoint)
	}
	if m.task != nil {
		edges = append(edges, subtask.EdgeTask)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubTaskMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case subtask.EdgePoint:
		if id := m.point; id != nil {
			return []ent.Value{*id}
		}
	case subtask.EdgeTask:
		ids := make([]ent.Value, 0, len(m.task))
		for id := range m.task {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubTaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtask != nil {
		edges = append(edges, subtask.EdgeTask)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubTaskMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case subtask.EdgeTask:
		ids := make([]ent.Value, 0, len(m.removedtask))
		for id := range m.removedtask {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubTaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedpoint {
		edges = append(edges, subtask.EdgePoint)
	}
	if m.clearedtask {
		edges = append(edges, subtask.EdgeTask)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubTaskMutation) EdgeCleared(name string) bool {
	switch name {
	case subtask.EdgePoint:
		return m.clearedpoint
	case subtask.EdgeTask:
		return m.clearedtask
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubTaskMutation) ClearEdge(name string) error {
	switch name {
	case subtask.EdgePoint:
		m.ClearPoint()
		return nil
	}
	return fmt.Errorf("unknown SubTask unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubTaskMutation) ResetEdge(name string) error {
	switch name {
	case subtask.EdgePoint:
		m.ResetPoint()
		return nil
	case subtask.EdgeTask:
		m.ResetTask()
		return nil
	}
	return fmt.Errorf("unknown SubTask edge %s", name)
}

// TaskMutation represents an operation that mutates the Task nodes in the graph.
type TaskMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	title                *string
	total_status         *int
	addtotal_status      *int
	created_at           *time.Time
	modified_at          *time.Time
	clearedFields        map[string]struct{}
	subtask              *int
	clearedsubtask       bool
	success_point        *int
	clearedsuccess_point bool
	user                 map[int]struct{}
	removeduser          map[int]struct{}
	cleareduser          bool
	done                 bool
	oldValue             func(context.Context) (*Task, error)
	predicates           []predicate.Task
}

var _ ent.Mutation = (*TaskMutation)(nil)

// taskOption allows management of the mutation configuration using functional options.
type taskOption func(*TaskMutation)

// newTaskMutation creates new mutation for the Task entity.
func newTaskMutation(c config, op Op, opts ...taskOption) *TaskMutation {
	m := &TaskMutation{
		config:        c,
		op:            op,
		typ:           TypeTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskID sets the ID field of the mutation.
func withTaskID(id int) taskOption {
	return func(m *TaskMutation) {
		var (
			err   error
			once  sync.Once
			value *Task
		)
		m.oldValue = func(ctx context.Context) (*Task, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Task.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTask sets the old Task of the mutation.
func withTask(node *Task) taskOption {
	return func(m *TaskMutation) {
		m.oldValue = func(context.Context) (*Task, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Task entities.
func (m *TaskMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TaskMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Task.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *TaskMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *TaskMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *TaskMutation) ResetTitle() {
	m.title = nil
}

// SetTotalStatus sets the "total_status" field.
func (m *TaskMutation) SetTotalStatus(i int) {
	m.total_status = &i
	m.addtotal_status = nil
}

// TotalStatus returns the value of the "total_status" field in the mutation.
func (m *TaskMutation) TotalStatus() (r int, exists bool) {
	v := m.total_status
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalStatus returns the old "total_status" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldTotalStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalStatus: %w", err)
	}
	return oldValue.TotalStatus, nil
}

// AddTotalStatus adds i to the "total_status" field.
func (m *TaskMutation) AddTotalStatus(i int) {
	if m.addtotal_status != nil {
		*m.addtotal_status += i
	} else {
		m.addtotal_status = &i
	}
}

// AddedTotalStatus returns the value that was added to the "total_status" field in this mutation.
func (m *TaskMutation) AddedTotalStatus() (r int, exists bool) {
	v := m.addtotal_status
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotalStatus resets all changes to the "total_status" field.
func (m *TaskMutation) ResetTotalStatus() {
	m.total_status = nil
	m.addtotal_status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TaskMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TaskMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TaskMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetModifiedAt sets the "modified_at" field.
func (m *TaskMutation) SetModifiedAt(t time.Time) {
	m.modified_at = &t
}

// ModifiedAt returns the value of the "modified_at" field in the mutation.
func (m *TaskMutation) ModifiedAt() (r time.Time, exists bool) {
	v := m.modified_at
	if v == nil {
		return
	}
	return *v, true
}

// OldModifiedAt returns the old "modified_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldModifiedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModifiedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModifiedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifiedAt: %w", err)
	}
	return oldValue.ModifiedAt, nil
}

// ResetModifiedAt resets all changes to the "modified_at" field.
func (m *TaskMutation) ResetModifiedAt() {
	m.modified_at = nil
}

// SetSubtaskID sets the "subtask" edge to the SubTask entity by id.
func (m *TaskMutation) SetSubtaskID(id int) {
	m.subtask = &id
}

// ClearSubtask clears the "subtask" edge to the SubTask entity.
func (m *TaskMutation) ClearSubtask() {
	m.clearedsubtask = true
}

// SubtaskCleared reports if the "subtask" edge to the SubTask entity was cleared.
func (m *TaskMutation) SubtaskCleared() bool {
	return m.clearedsubtask
}

// SubtaskID returns the "subtask" edge ID in the mutation.
func (m *TaskMutation) SubtaskID() (id int, exists bool) {
	if m.subtask != nil {
		return *m.subtask, true
	}
	return
}

// SubtaskIDs returns the "subtask" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubtaskID instead. It exists only for internal usage by the builders.
func (m *TaskMutation) SubtaskIDs() (ids []int) {
	if id := m.subtask; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubtask resets all changes to the "subtask" edge.
func (m *TaskMutation) ResetSubtask() {
	m.subtask = nil
	m.clearedsubtask = false
}

// SetSuccessPointID sets the "success_point" edge to the Point entity by id.
func (m *TaskMutation) SetSuccessPointID(id int) {
	m.success_point = &id
}

// ClearSuccessPoint clears the "success_point" edge to the Point entity.
func (m *TaskMutation) ClearSuccessPoint() {
	m.clearedsuccess_point = true
}

// SuccessPointCleared reports if the "success_point" edge to the Point entity was cleared.
func (m *TaskMutation) SuccessPointCleared() bool {
	return m.clearedsuccess_point
}

// SuccessPointID returns the "success_point" edge ID in the mutation.
func (m *TaskMutation) SuccessPointID() (id int, exists bool) {
	if m.success_point != nil {
		return *m.success_point, true
	}
	return
}

// SuccessPointIDs returns the "success_point" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SuccessPointID instead. It exists only for internal usage by the builders.
func (m *TaskMutation) SuccessPointIDs() (ids []int) {
	if id := m.success_point; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSuccessPoint resets all changes to the "success_point" edge.
func (m *TaskMutation) ResetSuccessPoint() {
	m.success_point = nil
	m.clearedsuccess_point = false
}

// AddUserIDs adds the "user" edge to the Member entity by ids.
func (m *TaskMutation) AddUserIDs(ids ...int) {
	if m.user == nil {
		m.user = make(map[int]struct{})
	}
	for i := range ids {
		m.user[ids[i]] = struct{}{}
	}
}

// ClearUser clears the "user" edge to the Member entity.
func (m *TaskMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the Member entity was cleared.
func (m *TaskMutation) UserCleared() bool {
	return m.cleareduser
}

// RemoveUserIDs removes the "user" edge to the Member entity by IDs.
func (m *TaskMutation) RemoveUserIDs(ids ...int) {
	if m.removeduser == nil {
		m.removeduser = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.user, ids[i])
		m.removeduser[ids[i]] = struct{}{}
	}
}

// RemovedUser returns the removed IDs of the "user" edge to the Member entity.
func (m *TaskMutation) RemovedUserIDs() (ids []int) {
	for id := range m.removeduser {
		ids = append(ids, id)
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
func (m *TaskMutation) UserIDs() (ids []int) {
	for id := range m.user {
		ids = append(ids, id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *TaskMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
	m.removeduser = nil
}

// Where appends a list predicates to the TaskMutation builder.
func (m *TaskMutation) Where(ps ...predicate.Task) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TaskMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TaskMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Task, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TaskMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TaskMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Task).
func (m *TaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.title != nil {
		fields = append(fields, task.FieldTitle)
	}
	if m.total_status != nil {
		fields = append(fields, task.FieldTotalStatus)
	}
	if m.created_at != nil {
		fields = append(fields, task.FieldCreatedAt)
	}
	if m.modified_at != nil {
		fields = append(fields, task.FieldModifiedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case task.FieldTitle:
		return m.Title()
	case task.FieldTotalStatus:
		return m.TotalStatus()
	case task.FieldCreatedAt:
		return m.CreatedAt()
	case task.FieldModifiedAt:
		return m.ModifiedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case task.FieldTitle:
		return m.OldTitle(ctx)
	case task.FieldTotalStatus:
		return m.OldTotalStatus(ctx)
	case task.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case task.FieldModifiedAt:
		return m.OldModifiedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Task field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	case task.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case task.FieldTotalStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalStatus(v)
		return nil
	case task.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case task.FieldModifiedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifiedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskMutation) AddedFields() []string {
	var fields []string
	if m.addtotal_status != nil {
		fields = append(fields, task.FieldTotalStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case task.FieldTotalStatus:
		return m.AddedTotalStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) AddField(name string, value ent.Value) error {
	switch name {
	case task.FieldTotalStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Task numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Task nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskMutation) ResetField(name string) error {
	switch name {
	case task.FieldTitle:
		m.ResetTitle()
		return nil
	case task.FieldTotalStatus:
		m.ResetTotalStatus()
		return nil
	case task.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case task.FieldModifiedAt:
		m.ResetModifiedAt()
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.subtask != nil {
		edges = append(edges, task.EdgeSubtask)
	}
	if m.success_point != nil {
		edges = append(edges, task.EdgeSuccessPoint)
	}
	if m.user != nil {
		edges = append(edges, task.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case task.EdgeSubtask:
		if id := m.subtask; id != nil {
			return []ent.Value{*id}
		}
	case task.EdgeSuccessPoint:
		if id := m.success_point; id != nil {
			return []ent.Value{*id}
		}
	case task.EdgeUser:
		ids := make([]ent.Value, 0, len(m.user))
		for id := range m.user {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removeduser != nil {
		edges = append(edges, task.EdgeUser)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case task.EdgeUser:
		ids := make([]ent.Value, 0, len(m.removeduser))
		for id := range m.removeduser {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedsubtask {
		edges = append(edges, task.EdgeSubtask)
	}
	if m.clearedsuccess_point {
		edges = append(edges, task.EdgeSuccessPoint)
	}
	if m.cleareduser {
		edges = append(edges, task.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskMutation) EdgeCleared(name string) bool {
	switch name {
	case task.EdgeSubtask:
		return m.clearedsubtask
	case task.EdgeSuccessPoint:
		return m.clearedsuccess_point
	case task.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskMutation) ClearEdge(name string) error {
	switch name {
	case task.EdgeSubtask:
		m.ClearSubtask()
		return nil
	case task.EdgeSuccessPoint:
		m.ClearSuccessPoint()
		return nil
	}
	return fmt.Errorf("unknown Task unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskMutation) ResetEdge(name string) error {
	switch name {
	case task.EdgeSubtask:
		m.ResetSubtask()
		return nil
	case task.EdgeSuccessPoint:
		m.ResetSuccessPoint()
		return nil
	case task.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Task edge %s", name)
}
