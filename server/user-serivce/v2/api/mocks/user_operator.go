// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	httputils "modules/common/httputils"

	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// UserOperator is an autogenerated mock type for the UserOperator type
type UserOperator struct {
	mock.Mock
}

// GetMe provides a mock function with given fields: ctx, uid
func (_m *UserOperator) GetMe(ctx *gin.Context, uid int) (*httputils.BaseResponse, *httputils.NetError) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for GetMe")
	}

	var r0 *httputils.BaseResponse
	var r1 *httputils.NetError
	if rf, ok := ret.Get(0).(func(*gin.Context, int) (*httputils.BaseResponse, *httputils.NetError)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, int) *httputils.BaseResponse); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*httputils.BaseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, int) *httputils.NetError); ok {
		r1 = rf(ctx, uid)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*httputils.NetError)
		}
	}

	return r0, r1
}

// NewUserOperator creates a new instance of UserOperator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserOperator(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserOperator {
	mock := &UserOperator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
