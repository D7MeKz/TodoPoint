// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// Storer is an autogenerated mock type for the Storer type
type Storer struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, d
func (_m *Storer) Create(ctx *gin.Context, d interface{}) error {
	ret := _m.Called(ctx, d)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, interface{}) error); ok {
		r0 = rf(ctx, d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsExist provides a mock function with given fields: ctx, d
func (_m *Storer) IsExist(ctx *gin.Context, d interface{}) (bool, error) {
	ret := _m.Called(ctx, d)

	if len(ret) == 0 {
		panic("no return value specified for IsExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, interface{}) (bool, error)); ok {
		return rf(ctx, d)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, interface{}) bool); ok {
		r0 = rf(ctx, d)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, interface{}) error); ok {
		r1 = rf(ctx, d)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Modify provides a mock function with given fields: ctx, d
func (_m *Storer) Modify(ctx *gin.Context, d interface{}) error {
	ret := _m.Called(ctx, d)

	if len(ret) == 0 {
		panic("no return value specified for Modify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, interface{}) error); ok {
		r0 = rf(ctx, d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorer creates a new instance of Storer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storer {
	mock := &Storer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
