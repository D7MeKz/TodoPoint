// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	"modules/common/httputils"
	data "todopoint/auth/v2/data"

	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// AuthOperator is an autogenerated mock type for the AuthOperator type
type AuthOperator struct {
	mock.Mock
}

// Issue provides a mock function with given fields: ctx
func (_m *AuthOperator) Issue(ctx *gin.Context) (*httputils.BaseResponse, *httputils.NetError) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Issue")
	}

	var r0 *httputils.BaseResponse
	var r1 *httputils.NetError
	if rf, ok := ret.Get(0).(func(*gin.Context) (*httputils.BaseResponse, *httputils.NetError)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) *httputils.BaseResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*httputils.BaseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) *httputils.NetError); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*httputils.NetError)
		}
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx
func (_m *AuthOperator) Login(ctx *gin.Context) (*httputils.BaseResponse, *httputils.NetError) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *httputils.BaseResponse
	var r1 *httputils.NetError
	if rf, ok := ret.Get(0).(func(*gin.Context) (*httputils.BaseResponse, *httputils.NetError)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) *httputils.BaseResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*httputils.BaseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) *httputils.NetError); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*httputils.NetError)
		}
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, req
func (_m *AuthOperator) Register(ctx *gin.Context, req data.RegisterRequest) (*httputils.BaseResponse, *httputils.NetError) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *httputils.BaseResponse
	var r1 *httputils.NetError
	if rf, ok := ret.Get(0).(func(*gin.Context, data.RegisterRequest) (*httputils.BaseResponse, *httputils.NetError)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, data.RegisterRequest) *httputils.BaseResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*httputils.BaseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, data.RegisterRequest) *httputils.NetError); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*httputils.NetError)
		}
	}

	return r0, r1
}

// Valid provides a mock function with given fields: ctx
func (_m *AuthOperator) Valid(ctx *gin.Context) (*httputils.BaseResponse, *httputils.NetError) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Valid")
	}

	var r0 *httputils.BaseResponse
	var r1 *httputils.NetError
	if rf, ok := ret.Get(0).(func(*gin.Context) (*httputils.BaseResponse, *httputils.NetError)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) *httputils.BaseResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*httputils.BaseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) *httputils.NetError); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*httputils.NetError)
		}
	}

	return r0, r1
}

// NewAuthOperator creates a new instance of AuthOperator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthOperator(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthOperator {
	mock := &AuthOperator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
