// Code generated by ent, DO NOT EDIT.

package ent

import (
	"common/db/ent/point"
	"common/db/ent/pointinfo"
	"common/db/ent/predicate"
	"common/db/ent/subtask"
	"common/db/ent/task"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PointUpdate is the builder for updating Point entities.
type PointUpdate struct {
	config
	hooks    []Hook
	mutation *PointMutation
}

// Where appends a list predicates to the PointUpdate builder.
func (pu *PointUpdate) Where(ps ...predicate.Point) *PointUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetPoint sets the "point" field.
func (pu *PointUpdate) SetPoint(i int) *PointUpdate {
	pu.mutation.ResetPoint()
	pu.mutation.SetPoint(i)
	return pu
}

// SetNillablePoint sets the "point" field if the given value is not nil.
func (pu *PointUpdate) SetNillablePoint(i *int) *PointUpdate {
	if i != nil {
		pu.SetPoint(*i)
	}
	return pu
}

// AddPoint adds i to the "point" field.
func (pu *PointUpdate) AddPoint(i int) *PointUpdate {
	pu.mutation.AddPoint(i)
	return pu
}

// SetType sets the "type" field.
func (pu *PointUpdate) SetType(s string) *PointUpdate {
	pu.mutation.SetType(s)
	return pu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pu *PointUpdate) SetNillableType(s *string) *PointUpdate {
	if s != nil {
		pu.SetType(*s)
	}
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *PointUpdate) SetCreatedAt(t time.Time) *PointUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *PointUpdate) SetNillableCreatedAt(t *time.Time) *PointUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetSubtaskID sets the "subtask" edge to the SubTask entity by ID.
func (pu *PointUpdate) SetSubtaskID(id int) *PointUpdate {
	pu.mutation.SetSubtaskID(id)
	return pu
}

// SetNillableSubtaskID sets the "subtask" edge to the SubTask entity by ID if the given value is not nil.
func (pu *PointUpdate) SetNillableSubtaskID(id *int) *PointUpdate {
	if id != nil {
		pu = pu.SetSubtaskID(*id)
	}
	return pu
}

// SetSubtask sets the "subtask" edge to the SubTask entity.
func (pu *PointUpdate) SetSubtask(s *SubTask) *PointUpdate {
	return pu.SetSubtaskID(s.ID)
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (pu *PointUpdate) SetTaskID(id int) *PointUpdate {
	pu.mutation.SetTaskID(id)
	return pu
}

// SetNillableTaskID sets the "task" edge to the Task entity by ID if the given value is not nil.
func (pu *PointUpdate) SetNillableTaskID(id *int) *PointUpdate {
	if id != nil {
		pu = pu.SetTaskID(*id)
	}
	return pu
}

// SetTask sets the "task" edge to the Task entity.
func (pu *PointUpdate) SetTask(t *Task) *PointUpdate {
	return pu.SetTaskID(t.ID)
}

// SetPointInfoID sets the "point_info" edge to the PointInfo entity by ID.
func (pu *PointUpdate) SetPointInfoID(id int) *PointUpdate {
	pu.mutation.SetPointInfoID(id)
	return pu
}

// SetNillablePointInfoID sets the "point_info" edge to the PointInfo entity by ID if the given value is not nil.
func (pu *PointUpdate) SetNillablePointInfoID(id *int) *PointUpdate {
	if id != nil {
		pu = pu.SetPointInfoID(*id)
	}
	return pu
}

// SetPointInfo sets the "point_info" edge to the PointInfo entity.
func (pu *PointUpdate) SetPointInfo(p *PointInfo) *PointUpdate {
	return pu.SetPointInfoID(p.ID)
}

// Mutation returns the PointMutation object of the builder.
func (pu *PointUpdate) Mutation() *PointMutation {
	return pu.mutation
}

// ClearSubtask clears the "subtask" edge to the SubTask entity.
func (pu *PointUpdate) ClearSubtask() *PointUpdate {
	pu.mutation.ClearSubtask()
	return pu
}

// ClearTask clears the "task" edge to the Task entity.
func (pu *PointUpdate) ClearTask() *PointUpdate {
	pu.mutation.ClearTask()
	return pu
}

// ClearPointInfo clears the "point_info" edge to the PointInfo entity.
func (pu *PointUpdate) ClearPointInfo() *PointUpdate {
	pu.mutation.ClearPointInfo()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PointUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PointUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PointUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PointUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PointUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(point.Table, point.Columns, sqlgraph.NewFieldSpec(point.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Point(); ok {
		_spec.SetField(point.FieldPoint, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedPoint(); ok {
		_spec.AddField(point.FieldPoint, field.TypeInt, value)
	}
	if value, ok := pu.mutation.GetType(); ok {
		_spec.SetField(point.FieldType, field.TypeString, value)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(point.FieldCreatedAt, field.TypeTime, value)
	}
	if pu.mutation.SubtaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   point.SubtaskTable,
			Columns: []string{point.SubtaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subtask.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SubtaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   point.SubtaskTable,
			Columns: []string{point.SubtaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subtask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   point.TaskTable,
			Columns: []string{point.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   point.TaskTable,
			Columns: []string{point.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PointInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   point.PointInfoTable,
			Columns: []string{point.PointInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pointinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PointInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   point.PointInfoTable,
			Columns: []string{point.PointInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pointinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{point.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PointUpdateOne is the builder for updating a single Point entity.
type PointUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PointMutation
}

// SetPoint sets the "point" field.
func (puo *PointUpdateOne) SetPoint(i int) *PointUpdateOne {
	puo.mutation.ResetPoint()
	puo.mutation.SetPoint(i)
	return puo
}

// SetNillablePoint sets the "point" field if the given value is not nil.
func (puo *PointUpdateOne) SetNillablePoint(i *int) *PointUpdateOne {
	if i != nil {
		puo.SetPoint(*i)
	}
	return puo
}

// AddPoint adds i to the "point" field.
func (puo *PointUpdateOne) AddPoint(i int) *PointUpdateOne {
	puo.mutation.AddPoint(i)
	return puo
}

// SetType sets the "type" field.
func (puo *PointUpdateOne) SetType(s string) *PointUpdateOne {
	puo.mutation.SetType(s)
	return puo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (puo *PointUpdateOne) SetNillableType(s *string) *PointUpdateOne {
	if s != nil {
		puo.SetType(*s)
	}
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *PointUpdateOne) SetCreatedAt(t time.Time) *PointUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *PointUpdateOne) SetNillableCreatedAt(t *time.Time) *PointUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetSubtaskID sets the "subtask" edge to the SubTask entity by ID.
func (puo *PointUpdateOne) SetSubtaskID(id int) *PointUpdateOne {
	puo.mutation.SetSubtaskID(id)
	return puo
}

// SetNillableSubtaskID sets the "subtask" edge to the SubTask entity by ID if the given value is not nil.
func (puo *PointUpdateOne) SetNillableSubtaskID(id *int) *PointUpdateOne {
	if id != nil {
		puo = puo.SetSubtaskID(*id)
	}
	return puo
}

// SetSubtask sets the "subtask" edge to the SubTask entity.
func (puo *PointUpdateOne) SetSubtask(s *SubTask) *PointUpdateOne {
	return puo.SetSubtaskID(s.ID)
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (puo *PointUpdateOne) SetTaskID(id int) *PointUpdateOne {
	puo.mutation.SetTaskID(id)
	return puo
}

// SetNillableTaskID sets the "task" edge to the Task entity by ID if the given value is not nil.
func (puo *PointUpdateOne) SetNillableTaskID(id *int) *PointUpdateOne {
	if id != nil {
		puo = puo.SetTaskID(*id)
	}
	return puo
}

// SetTask sets the "task" edge to the Task entity.
func (puo *PointUpdateOne) SetTask(t *Task) *PointUpdateOne {
	return puo.SetTaskID(t.ID)
}

// SetPointInfoID sets the "point_info" edge to the PointInfo entity by ID.
func (puo *PointUpdateOne) SetPointInfoID(id int) *PointUpdateOne {
	puo.mutation.SetPointInfoID(id)
	return puo
}

// SetNillablePointInfoID sets the "point_info" edge to the PointInfo entity by ID if the given value is not nil.
func (puo *PointUpdateOne) SetNillablePointInfoID(id *int) *PointUpdateOne {
	if id != nil {
		puo = puo.SetPointInfoID(*id)
	}
	return puo
}

// SetPointInfo sets the "point_info" edge to the PointInfo entity.
func (puo *PointUpdateOne) SetPointInfo(p *PointInfo) *PointUpdateOne {
	return puo.SetPointInfoID(p.ID)
}

// Mutation returns the PointMutation object of the builder.
func (puo *PointUpdateOne) Mutation() *PointMutation {
	return puo.mutation
}

// ClearSubtask clears the "subtask" edge to the SubTask entity.
func (puo *PointUpdateOne) ClearSubtask() *PointUpdateOne {
	puo.mutation.ClearSubtask()
	return puo
}

// ClearTask clears the "task" edge to the Task entity.
func (puo *PointUpdateOne) ClearTask() *PointUpdateOne {
	puo.mutation.ClearTask()
	return puo
}

// ClearPointInfo clears the "point_info" edge to the PointInfo entity.
func (puo *PointUpdateOne) ClearPointInfo() *PointUpdateOne {
	puo.mutation.ClearPointInfo()
	return puo
}

// Where appends a list predicates to the PointUpdate builder.
func (puo *PointUpdateOne) Where(ps ...predicate.Point) *PointUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PointUpdateOne) Select(field string, fields ...string) *PointUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Point entity.
func (puo *PointUpdateOne) Save(ctx context.Context) (*Point, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PointUpdateOne) SaveX(ctx context.Context) *Point {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PointUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PointUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PointUpdateOne) sqlSave(ctx context.Context) (_node *Point, err error) {
	_spec := sqlgraph.NewUpdateSpec(point.Table, point.Columns, sqlgraph.NewFieldSpec(point.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Point.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, point.FieldID)
		for _, f := range fields {
			if !point.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != point.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Point(); ok {
		_spec.SetField(point.FieldPoint, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedPoint(); ok {
		_spec.AddField(point.FieldPoint, field.TypeInt, value)
	}
	if value, ok := puo.mutation.GetType(); ok {
		_spec.SetField(point.FieldType, field.TypeString, value)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(point.FieldCreatedAt, field.TypeTime, value)
	}
	if puo.mutation.SubtaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   point.SubtaskTable,
			Columns: []string{point.SubtaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subtask.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SubtaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   point.SubtaskTable,
			Columns: []string{point.SubtaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subtask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   point.TaskTable,
			Columns: []string{point.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   point.TaskTable,
			Columns: []string{point.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PointInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   point.PointInfoTable,
			Columns: []string{point.PointInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pointinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PointInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   point.PointInfoTable,
			Columns: []string{point.PointInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pointinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Point{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{point.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
