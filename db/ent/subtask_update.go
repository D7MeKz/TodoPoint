// Code generated by ent, DO NOT EDIT.

package ent

import (
	"common/db/ent/point"
	"common/db/ent/predicate"
	"common/db/ent/subtask"
	"common/db/ent/task"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubTaskUpdate is the builder for updating SubTask entities.
type SubTaskUpdate struct {
	config
	hooks    []Hook
	mutation *SubTaskMutation
}

// Where appends a list predicates to the SubTaskUpdate builder.
func (stu *SubTaskUpdate) Where(ps ...predicate.SubTask) *SubTaskUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetPointID sets the "point" edge to the Point entity by ID.
func (stu *SubTaskUpdate) SetPointID(id int) *SubTaskUpdate {
	stu.mutation.SetPointID(id)
	return stu
}

// SetNillablePointID sets the "point" edge to the Point entity by ID if the given value is not nil.
func (stu *SubTaskUpdate) SetNillablePointID(id *int) *SubTaskUpdate {
	if id != nil {
		stu = stu.SetPointID(*id)
	}
	return stu
}

// SetPoint sets the "point" edge to the Point entity.
func (stu *SubTaskUpdate) SetPoint(p *Point) *SubTaskUpdate {
	return stu.SetPointID(p.ID)
}

// AddTaskIDs adds the "task" edge to the Task entity by IDs.
func (stu *SubTaskUpdate) AddTaskIDs(ids ...int) *SubTaskUpdate {
	stu.mutation.AddTaskIDs(ids...)
	return stu
}

// AddTask adds the "task" edges to the Task entity.
func (stu *SubTaskUpdate) AddTask(t ...*Task) *SubTaskUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return stu.AddTaskIDs(ids...)
}

// Mutation returns the SubTaskMutation object of the builder.
func (stu *SubTaskUpdate) Mutation() *SubTaskMutation {
	return stu.mutation
}

// ClearPoint clears the "point" edge to the Point entity.
func (stu *SubTaskUpdate) ClearPoint() *SubTaskUpdate {
	stu.mutation.ClearPoint()
	return stu
}

// ClearTask clears all "task" edges to the Task entity.
func (stu *SubTaskUpdate) ClearTask() *SubTaskUpdate {
	stu.mutation.ClearTask()
	return stu
}

// RemoveTaskIDs removes the "task" edge to Task entities by IDs.
func (stu *SubTaskUpdate) RemoveTaskIDs(ids ...int) *SubTaskUpdate {
	stu.mutation.RemoveTaskIDs(ids...)
	return stu
}

// RemoveTask removes "task" edges to Task entities.
func (stu *SubTaskUpdate) RemoveTask(t ...*Task) *SubTaskUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return stu.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *SubTaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, stu.sqlSave, stu.mutation, stu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stu *SubTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *SubTaskUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *SubTaskUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (stu *SubTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(subtask.Table, subtask.Columns, sqlgraph.NewFieldSpec(subtask.FieldID, field.TypeInt))
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if stu.mutation.PointCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subtask.PointTable,
			Columns: []string{subtask.PointColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(point.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.PointIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subtask.PointTable,
			Columns: []string{subtask.PointColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(point.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subtask.TaskTable,
			Columns: []string{subtask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.RemovedTaskIDs(); len(nodes) > 0 && !stu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subtask.TaskTable,
			Columns: []string{subtask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subtask.TaskTable,
			Columns: []string{subtask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subtask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	stu.mutation.done = true
	return n, nil
}

// SubTaskUpdateOne is the builder for updating a single SubTask entity.
type SubTaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubTaskMutation
}

// SetPointID sets the "point" edge to the Point entity by ID.
func (stuo *SubTaskUpdateOne) SetPointID(id int) *SubTaskUpdateOne {
	stuo.mutation.SetPointID(id)
	return stuo
}

// SetNillablePointID sets the "point" edge to the Point entity by ID if the given value is not nil.
func (stuo *SubTaskUpdateOne) SetNillablePointID(id *int) *SubTaskUpdateOne {
	if id != nil {
		stuo = stuo.SetPointID(*id)
	}
	return stuo
}

// SetPoint sets the "point" edge to the Point entity.
func (stuo *SubTaskUpdateOne) SetPoint(p *Point) *SubTaskUpdateOne {
	return stuo.SetPointID(p.ID)
}

// AddTaskIDs adds the "task" edge to the Task entity by IDs.
func (stuo *SubTaskUpdateOne) AddTaskIDs(ids ...int) *SubTaskUpdateOne {
	stuo.mutation.AddTaskIDs(ids...)
	return stuo
}

// AddTask adds the "task" edges to the Task entity.
func (stuo *SubTaskUpdateOne) AddTask(t ...*Task) *SubTaskUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return stuo.AddTaskIDs(ids...)
}

// Mutation returns the SubTaskMutation object of the builder.
func (stuo *SubTaskUpdateOne) Mutation() *SubTaskMutation {
	return stuo.mutation
}

// ClearPoint clears the "point" edge to the Point entity.
func (stuo *SubTaskUpdateOne) ClearPoint() *SubTaskUpdateOne {
	stuo.mutation.ClearPoint()
	return stuo
}

// ClearTask clears all "task" edges to the Task entity.
func (stuo *SubTaskUpdateOne) ClearTask() *SubTaskUpdateOne {
	stuo.mutation.ClearTask()
	return stuo
}

// RemoveTaskIDs removes the "task" edge to Task entities by IDs.
func (stuo *SubTaskUpdateOne) RemoveTaskIDs(ids ...int) *SubTaskUpdateOne {
	stuo.mutation.RemoveTaskIDs(ids...)
	return stuo
}

// RemoveTask removes "task" edges to Task entities.
func (stuo *SubTaskUpdateOne) RemoveTask(t ...*Task) *SubTaskUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return stuo.RemoveTaskIDs(ids...)
}

// Where appends a list predicates to the SubTaskUpdate builder.
func (stuo *SubTaskUpdateOne) Where(ps ...predicate.SubTask) *SubTaskUpdateOne {
	stuo.mutation.Where(ps...)
	return stuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *SubTaskUpdateOne) Select(field string, fields ...string) *SubTaskUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated SubTask entity.
func (stuo *SubTaskUpdateOne) Save(ctx context.Context) (*SubTask, error) {
	return withHooks(ctx, stuo.sqlSave, stuo.mutation, stuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *SubTaskUpdateOne) SaveX(ctx context.Context) *SubTask {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *SubTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *SubTaskUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (stuo *SubTaskUpdateOne) sqlSave(ctx context.Context) (_node *SubTask, err error) {
	_spec := sqlgraph.NewUpdateSpec(subtask.Table, subtask.Columns, sqlgraph.NewFieldSpec(subtask.FieldID, field.TypeInt))
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SubTask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subtask.FieldID)
		for _, f := range fields {
			if !subtask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subtask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if stuo.mutation.PointCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subtask.PointTable,
			Columns: []string{subtask.PointColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(point.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.PointIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subtask.PointTable,
			Columns: []string{subtask.PointColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(point.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subtask.TaskTable,
			Columns: []string{subtask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.RemovedTaskIDs(); len(nodes) > 0 && !stuo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subtask.TaskTable,
			Columns: []string{subtask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subtask.TaskTable,
			Columns: []string{subtask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SubTask{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subtask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	stuo.mutation.done = true
	return _node, nil
}
