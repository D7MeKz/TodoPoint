// Code generated by ent, DO NOT EDIT.

package ent

import (
	"common/db/ent/member"
	"common/db/ent/point"
	"common/db/ent/pointinfo"
	"common/db/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PointInfoUpdate is the builder for updating PointInfo entities.
type PointInfoUpdate struct {
	config
	hooks    []Hook
	mutation *PointInfoMutation
}

// Where appends a list predicates to the PointInfoUpdate builder.
func (piu *PointInfoUpdate) Where(ps ...predicate.PointInfo) *PointInfoUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetTotalPoints sets the "total_points" field.
func (piu *PointInfoUpdate) SetTotalPoints(i int64) *PointInfoUpdate {
	piu.mutation.ResetTotalPoints()
	piu.mutation.SetTotalPoints(i)
	return piu
}

// SetNillableTotalPoints sets the "total_points" field if the given value is not nil.
func (piu *PointInfoUpdate) SetNillableTotalPoints(i *int64) *PointInfoUpdate {
	if i != nil {
		piu.SetTotalPoints(*i)
	}
	return piu
}

// AddTotalPoints adds i to the "total_points" field.
func (piu *PointInfoUpdate) AddTotalPoints(i int64) *PointInfoUpdate {
	piu.mutation.AddTotalPoints(i)
	return piu
}

// SetModifiedAt sets the "modified_at" field.
func (piu *PointInfoUpdate) SetModifiedAt(t time.Time) *PointInfoUpdate {
	piu.mutation.SetModifiedAt(t)
	return piu
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (piu *PointInfoUpdate) SetNillableModifiedAt(t *time.Time) *PointInfoUpdate {
	if t != nil {
		piu.SetModifiedAt(*t)
	}
	return piu
}

// AddPointIDs adds the "points" edge to the Point entity by IDs.
func (piu *PointInfoUpdate) AddPointIDs(ids ...int) *PointInfoUpdate {
	piu.mutation.AddPointIDs(ids...)
	return piu
}

// AddPoints adds the "points" edges to the Point entity.
func (piu *PointInfoUpdate) AddPoints(p ...*Point) *PointInfoUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piu.AddPointIDs(ids...)
}

// SetUserIDID sets the "user_id" edge to the Member entity by ID.
func (piu *PointInfoUpdate) SetUserIDID(id int) *PointInfoUpdate {
	piu.mutation.SetUserIDID(id)
	return piu
}

// SetNillableUserIDID sets the "user_id" edge to the Member entity by ID if the given value is not nil.
func (piu *PointInfoUpdate) SetNillableUserIDID(id *int) *PointInfoUpdate {
	if id != nil {
		piu = piu.SetUserIDID(*id)
	}
	return piu
}

// SetUserID sets the "user_id" edge to the Member entity.
func (piu *PointInfoUpdate) SetUserID(m *Member) *PointInfoUpdate {
	return piu.SetUserIDID(m.ID)
}

// Mutation returns the PointInfoMutation object of the builder.
func (piu *PointInfoUpdate) Mutation() *PointInfoMutation {
	return piu.mutation
}

// ClearPoints clears all "points" edges to the Point entity.
func (piu *PointInfoUpdate) ClearPoints() *PointInfoUpdate {
	piu.mutation.ClearPoints()
	return piu
}

// RemovePointIDs removes the "points" edge to Point entities by IDs.
func (piu *PointInfoUpdate) RemovePointIDs(ids ...int) *PointInfoUpdate {
	piu.mutation.RemovePointIDs(ids...)
	return piu
}

// RemovePoints removes "points" edges to Point entities.
func (piu *PointInfoUpdate) RemovePoints(p ...*Point) *PointInfoUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piu.RemovePointIDs(ids...)
}

// ClearUserID clears the "user_id" edge to the Member entity.
func (piu *PointInfoUpdate) ClearUserID() *PointInfoUpdate {
	piu.mutation.ClearUserID()
	return piu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *PointInfoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, piu.sqlSave, piu.mutation, piu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piu *PointInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *PointInfoUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *PointInfoUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (piu *PointInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(pointinfo.Table, pointinfo.Columns, sqlgraph.NewFieldSpec(pointinfo.FieldID, field.TypeInt))
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.TotalPoints(); ok {
		_spec.SetField(pointinfo.FieldTotalPoints, field.TypeInt64, value)
	}
	if value, ok := piu.mutation.AddedTotalPoints(); ok {
		_spec.AddField(pointinfo.FieldTotalPoints, field.TypeInt64, value)
	}
	if value, ok := piu.mutation.ModifiedAt(); ok {
		_spec.SetField(pointinfo.FieldModifiedAt, field.TypeTime, value)
	}
	if piu.mutation.PointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pointinfo.PointsTable,
			Columns: []string{pointinfo.PointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(point.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.RemovedPointsIDs(); len(nodes) > 0 && !piu.mutation.PointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pointinfo.PointsTable,
			Columns: []string{pointinfo.PointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(point.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.PointsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pointinfo.PointsTable,
			Columns: []string{pointinfo.PointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(point.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piu.mutation.UserIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pointinfo.UserIDTable,
			Columns: []string{pointinfo.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.UserIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pointinfo.UserIDTable,
			Columns: []string{pointinfo.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pointinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piu.mutation.done = true
	return n, nil
}

// PointInfoUpdateOne is the builder for updating a single PointInfo entity.
type PointInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PointInfoMutation
}

// SetTotalPoints sets the "total_points" field.
func (piuo *PointInfoUpdateOne) SetTotalPoints(i int64) *PointInfoUpdateOne {
	piuo.mutation.ResetTotalPoints()
	piuo.mutation.SetTotalPoints(i)
	return piuo
}

// SetNillableTotalPoints sets the "total_points" field if the given value is not nil.
func (piuo *PointInfoUpdateOne) SetNillableTotalPoints(i *int64) *PointInfoUpdateOne {
	if i != nil {
		piuo.SetTotalPoints(*i)
	}
	return piuo
}

// AddTotalPoints adds i to the "total_points" field.
func (piuo *PointInfoUpdateOne) AddTotalPoints(i int64) *PointInfoUpdateOne {
	piuo.mutation.AddTotalPoints(i)
	return piuo
}

// SetModifiedAt sets the "modified_at" field.
func (piuo *PointInfoUpdateOne) SetModifiedAt(t time.Time) *PointInfoUpdateOne {
	piuo.mutation.SetModifiedAt(t)
	return piuo
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (piuo *PointInfoUpdateOne) SetNillableModifiedAt(t *time.Time) *PointInfoUpdateOne {
	if t != nil {
		piuo.SetModifiedAt(*t)
	}
	return piuo
}

// AddPointIDs adds the "points" edge to the Point entity by IDs.
func (piuo *PointInfoUpdateOne) AddPointIDs(ids ...int) *PointInfoUpdateOne {
	piuo.mutation.AddPointIDs(ids...)
	return piuo
}

// AddPoints adds the "points" edges to the Point entity.
func (piuo *PointInfoUpdateOne) AddPoints(p ...*Point) *PointInfoUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piuo.AddPointIDs(ids...)
}

// SetUserIDID sets the "user_id" edge to the Member entity by ID.
func (piuo *PointInfoUpdateOne) SetUserIDID(id int) *PointInfoUpdateOne {
	piuo.mutation.SetUserIDID(id)
	return piuo
}

// SetNillableUserIDID sets the "user_id" edge to the Member entity by ID if the given value is not nil.
func (piuo *PointInfoUpdateOne) SetNillableUserIDID(id *int) *PointInfoUpdateOne {
	if id != nil {
		piuo = piuo.SetUserIDID(*id)
	}
	return piuo
}

// SetUserID sets the "user_id" edge to the Member entity.
func (piuo *PointInfoUpdateOne) SetUserID(m *Member) *PointInfoUpdateOne {
	return piuo.SetUserIDID(m.ID)
}

// Mutation returns the PointInfoMutation object of the builder.
func (piuo *PointInfoUpdateOne) Mutation() *PointInfoMutation {
	return piuo.mutation
}

// ClearPoints clears all "points" edges to the Point entity.
func (piuo *PointInfoUpdateOne) ClearPoints() *PointInfoUpdateOne {
	piuo.mutation.ClearPoints()
	return piuo
}

// RemovePointIDs removes the "points" edge to Point entities by IDs.
func (piuo *PointInfoUpdateOne) RemovePointIDs(ids ...int) *PointInfoUpdateOne {
	piuo.mutation.RemovePointIDs(ids...)
	return piuo
}

// RemovePoints removes "points" edges to Point entities.
func (piuo *PointInfoUpdateOne) RemovePoints(p ...*Point) *PointInfoUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piuo.RemovePointIDs(ids...)
}

// ClearUserID clears the "user_id" edge to the Member entity.
func (piuo *PointInfoUpdateOne) ClearUserID() *PointInfoUpdateOne {
	piuo.mutation.ClearUserID()
	return piuo
}

// Where appends a list predicates to the PointInfoUpdate builder.
func (piuo *PointInfoUpdateOne) Where(ps ...predicate.PointInfo) *PointInfoUpdateOne {
	piuo.mutation.Where(ps...)
	return piuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *PointInfoUpdateOne) Select(field string, fields ...string) *PointInfoUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated PointInfo entity.
func (piuo *PointInfoUpdateOne) Save(ctx context.Context) (*PointInfo, error) {
	return withHooks(ctx, piuo.sqlSave, piuo.mutation, piuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *PointInfoUpdateOne) SaveX(ctx context.Context) *PointInfo {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *PointInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *PointInfoUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (piuo *PointInfoUpdateOne) sqlSave(ctx context.Context) (_node *PointInfo, err error) {
	_spec := sqlgraph.NewUpdateSpec(pointinfo.Table, pointinfo.Columns, sqlgraph.NewFieldSpec(pointinfo.FieldID, field.TypeInt))
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PointInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pointinfo.FieldID)
		for _, f := range fields {
			if !pointinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pointinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.TotalPoints(); ok {
		_spec.SetField(pointinfo.FieldTotalPoints, field.TypeInt64, value)
	}
	if value, ok := piuo.mutation.AddedTotalPoints(); ok {
		_spec.AddField(pointinfo.FieldTotalPoints, field.TypeInt64, value)
	}
	if value, ok := piuo.mutation.ModifiedAt(); ok {
		_spec.SetField(pointinfo.FieldModifiedAt, field.TypeTime, value)
	}
	if piuo.mutation.PointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pointinfo.PointsTable,
			Columns: []string{pointinfo.PointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(point.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.RemovedPointsIDs(); len(nodes) > 0 && !piuo.mutation.PointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pointinfo.PointsTable,
			Columns: []string{pointinfo.PointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(point.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.PointsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pointinfo.PointsTable,
			Columns: []string{pointinfo.PointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(point.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piuo.mutation.UserIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pointinfo.UserIDTable,
			Columns: []string{pointinfo.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.UserIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pointinfo.UserIDTable,
			Columns: []string{pointinfo.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PointInfo{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pointinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piuo.mutation.done = true
	return _node, nil
}
