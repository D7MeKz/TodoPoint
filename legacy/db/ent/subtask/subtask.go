// Code generated by ent, DO NOT EDIT.

package subtask

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the subtask type in the database.
	Label = "sub_task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgePoint holds the string denoting the point edge name in mutations.
	EdgePoint = "point"
	// EdgeTask holds the string denoting the task edge name in mutations.
	EdgeTask = "task"
	// Table holds the table name of the subtask in the database.
	Table = "sub_tasks"
	// PointTable is the table that holds the point relation/edge.
	PointTable = "points"
	// PointInverseTable is the table name for the Point entity.
	// It exists in this package in order to avoid circular dependency with the "point" package.
	PointInverseTable = "points"
	// PointColumn is the table column denoting the point relation/edge.
	PointColumn = "sub_task_point"
	// TaskTable is the table that holds the task relation/edge.
	TaskTable = "sub_tasks"
	// TaskInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TaskInverseTable = "tasks"
	// TaskColumn is the table column denoting the task relation/edge.
	TaskColumn = "task_subtask"
)

// Columns holds all SQL columns for subtask fields.
var Columns = []string{
	FieldID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "sub_tasks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"task_subtask",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the SubTask queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPointField orders the results by point field.
func ByPointField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPointStep(), sql.OrderByField(field, opts...))
	}
}

// ByTaskField orders the results by task field.
func ByTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskStep(), sql.OrderByField(field, opts...))
	}
}
func newPointStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PointInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, PointTable, PointColumn),
	)
}
func newTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TaskTable, TaskColumn),
	)
}
