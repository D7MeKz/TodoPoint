// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	ent "todopoint/common/db/ent"

	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"

	request "todopoint/task/data/request"
)

// TaskStore is an autogenerated mock type for the TaskStore type
type TaskStore struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, req
func (_m *TaskStore) Create(ctx *gin.Context, req request.CreateTask) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, request.CreateTask) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTasks provides a mock function with given fields: ctx, memberId
func (_m *TaskStore) GetAllTasks(ctx *gin.Context, memberId int) ([]*ent.Task, error) {
	ret := _m.Called(ctx, memberId)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTasks")
	}

	var r0 []*ent.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, int) ([]*ent.Task, error)); ok {
		return rf(ctx, memberId)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, int) []*ent.Task); ok {
		r0 = rf(ctx, memberId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, int) error); ok {
		r1 = rf(ctx, memberId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTaskStore creates a new instance of TaskStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskStore {
	mock := &TaskStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
