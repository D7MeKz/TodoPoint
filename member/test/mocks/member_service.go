// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	ent "todopoint/member/out/ent"
	data "todopoint/member/utils/data"

	errorutils "todopoint/common/errorutils"

	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// MemberService is an autogenerated mock type for the MemberService type
type MemberService struct {
	mock.Mock
}

// CheckIsValid provides a mock function with given fields: ctx, memId
func (_m *MemberService) CheckIsValid(ctx *gin.Context, memId int) (bool, *errorutils.NetError) {
	ret := _m.Called(ctx, memId)

	if len(ret) == 0 {
		panic("no return value specified for CheckIsValid")
	}

	var r0 bool
	var r1 *errorutils.NetError
	if rf, ok := ret.Get(0).(func(*gin.Context, int) (bool, *errorutils.NetError)); ok {
		return rf(ctx, memId)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, int) bool); ok {
		r0 = rf(ctx, memId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, int) *errorutils.NetError); ok {
		r1 = rf(ctx, memId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errorutils.NetError)
		}
	}

	return r0, r1
}

// CreateMember provides a mock function with given fields: ctx, req
func (_m *MemberService) CreateMember(ctx *gin.Context, req data.RegisterReq) (*ent.Member, *errorutils.NetError) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateMember")
	}

	var r0 *ent.Member
	var r1 *errorutils.NetError
	if rf, ok := ret.Get(0).(func(*gin.Context, data.RegisterReq) (*ent.Member, *errorutils.NetError)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, data.RegisterReq) *ent.Member); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Member)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, data.RegisterReq) *errorutils.NetError); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errorutils.NetError)
		}
	}

	return r0, r1
}

// LoginMember provides a mock function with given fields: ctx, req
func (_m *MemberService) LoginMember(ctx *gin.Context, req data.LoginReq) (int, *errorutils.NetError) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for LoginMember")
	}

	var r0 int
	var r1 *errorutils.NetError
	if rf, ok := ret.Get(0).(func(*gin.Context, data.LoginReq) (int, *errorutils.NetError)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, data.LoginReq) int); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, data.LoginReq) *errorutils.NetError); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errorutils.NetError)
		}
	}

	return r0, r1
}

// NewMemberService creates a new instance of MemberService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMemberService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MemberService {
	mock := &MemberService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
