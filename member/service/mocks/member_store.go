// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	ent "todopoint/member/out/ent"
	data "todopoint/member/utils/data"

	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// MemberStore is an autogenerated mock type for the MemberStore type
type MemberStore struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, req
func (_m *MemberStore) Create(ctx *gin.Context, req data.RegisterReq) (*ent.Member, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *ent.Member
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, data.RegisterReq) (*ent.Member, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, data.RegisterReq) *ent.Member); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Member)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, data.RegisterReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, memberId
func (_m *MemberStore) GetById(ctx *gin.Context, memberId int) (*ent.Member, error) {
	ret := _m.Called(ctx, memberId)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *ent.Member
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, int) (*ent.Member, error)); ok {
		return rf(ctx, memberId)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, int) *ent.Member); ok {
		r0 = rf(ctx, memberId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Member)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, int) error); ok {
		r1 = rf(ctx, memberId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIDByLogin provides a mock function with given fields: ctx, req
func (_m *MemberStore) GetIDByLogin(ctx *gin.Context, req data.LoginReq) (int, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetIDByLogin")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, data.LoginReq) (int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, data.LoginReq) int); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, data.LoginReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMemberByEmail provides a mock function with given fields: ctx, email
func (_m *MemberStore) GetMemberByEmail(ctx *gin.Context, email string) (*ent.Member, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetMemberByEmail")
	}

	var r0 *ent.Member
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, string) (*ent.Member, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, string) *ent.Member); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Member)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsExistByID provides a mock function with given fields: ctx, memId
func (_m *MemberStore) IsExistByID(ctx *gin.Context, memId int) (bool, error) {
	ret := _m.Called(ctx, memId)

	if len(ret) == 0 {
		panic("no return value specified for IsExistByID")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, int) (bool, error)); ok {
		return rf(ctx, memId)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, int) bool); ok {
		r0 = rf(ctx, memId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, int) error); ok {
		r1 = rf(ctx, memId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMemberStore creates a new instance of MemberStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMemberStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MemberStore {
	mock := &MemberStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
