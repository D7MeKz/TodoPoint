// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	ent "todopoint/common/db/ent"
	request "todopoint/member/data"

	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"

	webutils "todopoint/common/webutils"
)

// MemberStore is an autogenerated mock type for the MemberStore type
type MemberStore struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, req
func (_m *MemberStore) Create(ctx *gin.Context, req request.RegisterReq) (*ent.Member, *webutils.Error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *ent.Member
	var r1 *webutils.Error
	if rf, ok := ret.Get(0).(func(*gin.Context, request.RegisterReq) (*ent.Member, *webutils.Error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, request.RegisterReq) *ent.Member); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Member)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, request.RegisterReq) *webutils.Error); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*webutils.Error)
		}
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, memberId
func (_m *MemberStore) GetById(ctx *gin.Context, memberId int) (*ent.Member, *webutils.Error) {
	ret := _m.Called(ctx, memberId)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *ent.Member
	var r1 *webutils.Error
	if rf, ok := ret.Get(0).(func(*gin.Context, int) (*ent.Member, *webutils.Error)); ok {
		return rf(ctx, memberId)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, int) *ent.Member); ok {
		r0 = rf(ctx, memberId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Member)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, int) *webutils.Error); ok {
		r1 = rf(ctx, memberId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*webutils.Error)
		}
	}

	return r0, r1
}

// IsExist provides a mock function with given fields: ctx, email
func (_m *MemberStore) IsExist(ctx *gin.Context, email string) (*ent.Member, *webutils.Error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for IsExist")
	}

	var r0 *ent.Member
	var r1 *webutils.Error
	if rf, ok := ret.Get(0).(func(*gin.Context, string) (*ent.Member, *webutils.Error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, string) *ent.Member); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Member)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, string) *webutils.Error); ok {
		r1 = rf(ctx, email)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*webutils.Error)
		}
	}

	return r0, r1
}

// NewMemberStore creates a new instance of MemberStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMemberStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MemberStore {
	mock := &MemberStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
